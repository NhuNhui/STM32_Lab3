
Led_animation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d58  08002d58  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002d58  08002d58  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d58  08002d58  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d5c  08002d5c  00012d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200000a4  08002e04  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002e04  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a05e  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c1d  00000000  00000000  0002a12b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002bd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002c840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176fa  00000000  00000000  0002d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c38a  00000000  00000000  0004491a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000858e5  00000000  00000000  00050ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6589  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a9c  00000000  00000000  000d65dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d1c 	.word	0x08002d1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08002d1c 	.word	0x08002d1c

0800014c <normalModeFunction>:
int counterLedGreen2;
int counterLedYellow1;
int counterLedYellow2;

void normalModeFunction()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (statusTraffic1)
 8000150:	4b92      	ldr	r3, [pc, #584]	; (800039c <normalModeFunction+0x250>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b03      	cmp	r3, #3
 8000156:	f200 8086 	bhi.w	8000266 <normalModeFunction+0x11a>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <normalModeFunction+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	0800018f 	.word	0x0800018f
 8000168:	080001d7 	.word	0x080001d7
 800016c:	0800021f 	.word	0x0800021f
	{
	case INIT1:
		counterLedRed1 = durationLedRed;
 8000170:	4b8b      	ldr	r3, [pc, #556]	; (80003a0 <normalModeFunction+0x254>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a8b      	ldr	r2, [pc, #556]	; (80003a4 <normalModeFunction+0x258>)
 8000176:	6013      	str	r3, [r2, #0]
		statusTraffic1 = STATUS1_1;
 8000178:	4b88      	ldr	r3, [pc, #544]	; (800039c <normalModeFunction+0x250>)
 800017a:	2201      	movs	r2, #1
 800017c:	601a      	str	r2, [r3, #0]
		onSingleRedTraffic1();
 800017e:	f000 faa7 	bl	80006d0 <onSingleRedTraffic1>
		update7SEGBufferTraffic1(counterLedRed1);
 8000182:	4b88      	ldr	r3, [pc, #544]	; (80003a4 <normalModeFunction+0x258>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fa3c 	bl	8000604 <update7SEGBufferTraffic1>
		break;
 800018c:	e072      	b.n	8000274 <normalModeFunction+0x128>
	case STATUS1_1:
		if (counterLedRed1 > 0)
 800018e:	4b85      	ldr	r3, [pc, #532]	; (80003a4 <normalModeFunction+0x258>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	2b00      	cmp	r3, #0
 8000194:	dd69      	ble.n	800026a <normalModeFunction+0x11e>
		{
			counterLedRed1--;
 8000196:	4b83      	ldr	r3, [pc, #524]	; (80003a4 <normalModeFunction+0x258>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	3b01      	subs	r3, #1
 800019c:	4a81      	ldr	r2, [pc, #516]	; (80003a4 <normalModeFunction+0x258>)
 800019e:	6013      	str	r3, [r2, #0]
			if (counterLedRed1 <= 0)
 80001a0:	4b80      	ldr	r3, [pc, #512]	; (80003a4 <normalModeFunction+0x258>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	dc0e      	bgt.n	80001c6 <normalModeFunction+0x7a>
			{
				counterLedGreen1 = durationLedGreen;
 80001a8:	4b7f      	ldr	r3, [pc, #508]	; (80003a8 <normalModeFunction+0x25c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a7f      	ldr	r2, [pc, #508]	; (80003ac <normalModeFunction+0x260>)
 80001ae:	6013      	str	r3, [r2, #0]
				statusTraffic1 = STATUS1_2;
 80001b0:	4b7a      	ldr	r3, [pc, #488]	; (800039c <normalModeFunction+0x250>)
 80001b2:	2202      	movs	r2, #2
 80001b4:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic1();
 80001b6:	f000 fa9b 	bl	80006f0 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 80001ba:	4b7c      	ldr	r3, [pc, #496]	; (80003ac <normalModeFunction+0x260>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fa20 	bl	8000604 <update7SEGBufferTraffic1>
			{
				onSingleRedTraffic1();
				update7SEGBufferTraffic1(counterLedRed1);
			}
		}
		break;
 80001c4:	e051      	b.n	800026a <normalModeFunction+0x11e>
				onSingleRedTraffic1();
 80001c6:	f000 fa83 	bl	80006d0 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 80001ca:	4b76      	ldr	r3, [pc, #472]	; (80003a4 <normalModeFunction+0x258>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fa18 	bl	8000604 <update7SEGBufferTraffic1>
		break;
 80001d4:	e049      	b.n	800026a <normalModeFunction+0x11e>
	case STATUS1_2:
		if (counterLedGreen1 > 0)
 80001d6:	4b75      	ldr	r3, [pc, #468]	; (80003ac <normalModeFunction+0x260>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	dd47      	ble.n	800026e <normalModeFunction+0x122>
		{
			counterLedGreen1--;
 80001de:	4b73      	ldr	r3, [pc, #460]	; (80003ac <normalModeFunction+0x260>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	4a71      	ldr	r2, [pc, #452]	; (80003ac <normalModeFunction+0x260>)
 80001e6:	6013      	str	r3, [r2, #0]
			if (counterLedGreen1 <= 0)
 80001e8:	4b70      	ldr	r3, [pc, #448]	; (80003ac <normalModeFunction+0x260>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	dc0e      	bgt.n	800020e <normalModeFunction+0xc2>
			{
				counterLedYellow1 = durationLedYellow;
 80001f0:	4b6f      	ldr	r3, [pc, #444]	; (80003b0 <normalModeFunction+0x264>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a6f      	ldr	r2, [pc, #444]	; (80003b4 <normalModeFunction+0x268>)
 80001f6:	6013      	str	r3, [r2, #0]
				statusTraffic1 = STATUS1_3;
 80001f8:	4b68      	ldr	r3, [pc, #416]	; (800039c <normalModeFunction+0x250>)
 80001fa:	2203      	movs	r2, #3
 80001fc:	601a      	str	r2, [r3, #0]
				onSingleYellowTraffic1();
 80001fe:	f000 fa6f 	bl	80006e0 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 8000202:	4b6c      	ldr	r3, [pc, #432]	; (80003b4 <normalModeFunction+0x268>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f9fc 	bl	8000604 <update7SEGBufferTraffic1>
			{
				onSingleGreenTraffic1();
				update7SEGBufferTraffic1(counterLedGreen1);
			}
		}
		break;
 800020c:	e02f      	b.n	800026e <normalModeFunction+0x122>
				onSingleGreenTraffic1();
 800020e:	f000 fa6f 	bl	80006f0 <onSingleGreenTraffic1>
				update7SEGBufferTraffic1(counterLedGreen1);
 8000212:	4b66      	ldr	r3, [pc, #408]	; (80003ac <normalModeFunction+0x260>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4618      	mov	r0, r3
 8000218:	f000 f9f4 	bl	8000604 <update7SEGBufferTraffic1>
		break;
 800021c:	e027      	b.n	800026e <normalModeFunction+0x122>
	case STATUS1_3:
		if (counterLedYellow1 > 0)
 800021e:	4b65      	ldr	r3, [pc, #404]	; (80003b4 <normalModeFunction+0x268>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b00      	cmp	r3, #0
 8000224:	dd25      	ble.n	8000272 <normalModeFunction+0x126>
		{
			counterLedYellow1--;
 8000226:	4b63      	ldr	r3, [pc, #396]	; (80003b4 <normalModeFunction+0x268>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	3b01      	subs	r3, #1
 800022c:	4a61      	ldr	r2, [pc, #388]	; (80003b4 <normalModeFunction+0x268>)
 800022e:	6013      	str	r3, [r2, #0]
			if (counterLedYellow1 <= 0)
 8000230:	4b60      	ldr	r3, [pc, #384]	; (80003b4 <normalModeFunction+0x268>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	dc0e      	bgt.n	8000256 <normalModeFunction+0x10a>
			{
				counterLedRed1 = durationLedRed;
 8000238:	4b59      	ldr	r3, [pc, #356]	; (80003a0 <normalModeFunction+0x254>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a59      	ldr	r2, [pc, #356]	; (80003a4 <normalModeFunction+0x258>)
 800023e:	6013      	str	r3, [r2, #0]
				statusTraffic1 = STATUS1_1;
 8000240:	4b56      	ldr	r3, [pc, #344]	; (800039c <normalModeFunction+0x250>)
 8000242:	2201      	movs	r2, #1
 8000244:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic1();
 8000246:	f000 fa43 	bl	80006d0 <onSingleRedTraffic1>
				update7SEGBufferTraffic1(counterLedRed1);
 800024a:	4b56      	ldr	r3, [pc, #344]	; (80003a4 <normalModeFunction+0x258>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4618      	mov	r0, r3
 8000250:	f000 f9d8 	bl	8000604 <update7SEGBufferTraffic1>
			{
				onSingleYellowTraffic1();
				update7SEGBufferTraffic1(counterLedYellow1);
			}
		}
		break;
 8000254:	e00d      	b.n	8000272 <normalModeFunction+0x126>
				onSingleYellowTraffic1();
 8000256:	f000 fa43 	bl	80006e0 <onSingleYellowTraffic1>
				update7SEGBufferTraffic1(counterLedYellow1);
 800025a:	4b56      	ldr	r3, [pc, #344]	; (80003b4 <normalModeFunction+0x268>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f000 f9d0 	bl	8000604 <update7SEGBufferTraffic1>
		break;
 8000264:	e005      	b.n	8000272 <normalModeFunction+0x126>
	default:
		break;
 8000266:	bf00      	nop
 8000268:	e004      	b.n	8000274 <normalModeFunction+0x128>
		break;
 800026a:	bf00      	nop
 800026c:	e002      	b.n	8000274 <normalModeFunction+0x128>
		break;
 800026e:	bf00      	nop
 8000270:	e000      	b.n	8000274 <normalModeFunction+0x128>
		break;
 8000272:	bf00      	nop
	}
	switch (statusTraffic2)
 8000274:	4b50      	ldr	r3, [pc, #320]	; (80003b8 <normalModeFunction+0x26c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b03      	cmp	r3, #3
 800027a:	f200 8086 	bhi.w	800038a <normalModeFunction+0x23e>
 800027e:	a201      	add	r2, pc, #4	; (adr r2, 8000284 <normalModeFunction+0x138>)
 8000280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000284:	08000295 	.word	0x08000295
 8000288:	080002b3 	.word	0x080002b3
 800028c:	080002fb 	.word	0x080002fb
 8000290:	08000343 	.word	0x08000343
	{
	case INIT2:
		statusTraffic2 = STATUS2_1;
 8000294:	4b48      	ldr	r3, [pc, #288]	; (80003b8 <normalModeFunction+0x26c>)
 8000296:	2201      	movs	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
		counterLedGreen2 = durationLedGreen;
 800029a:	4b43      	ldr	r3, [pc, #268]	; (80003a8 <normalModeFunction+0x25c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a47      	ldr	r2, [pc, #284]	; (80003bc <normalModeFunction+0x270>)
 80002a0:	6013      	str	r3, [r2, #0]
		onSingleGreenTraffic2();
 80002a2:	f000 fa3d 	bl	8000720 <onSingleGreenTraffic2>
		update7SEGBufferTraffic2(counterLedGreen2);
 80002a6:	4b45      	ldr	r3, [pc, #276]	; (80003bc <normalModeFunction+0x270>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4618      	mov	r0, r3
 80002ac:	f000 f9b6 	bl	800061c <update7SEGBufferTraffic2>
		break;
 80002b0:	e072      	b.n	8000398 <normalModeFunction+0x24c>
	case STATUS2_1:
		if (counterLedGreen2 > 0)
 80002b2:	4b42      	ldr	r3, [pc, #264]	; (80003bc <normalModeFunction+0x270>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	dd69      	ble.n	800038e <normalModeFunction+0x242>
		{
			counterLedGreen2--;
 80002ba:	4b40      	ldr	r3, [pc, #256]	; (80003bc <normalModeFunction+0x270>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	4a3e      	ldr	r2, [pc, #248]	; (80003bc <normalModeFunction+0x270>)
 80002c2:	6013      	str	r3, [r2, #0]
			if (counterLedGreen2 <= 0)
 80002c4:	4b3d      	ldr	r3, [pc, #244]	; (80003bc <normalModeFunction+0x270>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	dc0e      	bgt.n	80002ea <normalModeFunction+0x19e>
			{
				onSingleYellowTraffic2();
 80002cc:	f000 fa20 	bl	8000710 <onSingleYellowTraffic2>
				counterLedYellow2 = durationLedYellow;
 80002d0:	4b37      	ldr	r3, [pc, #220]	; (80003b0 <normalModeFunction+0x264>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a3a      	ldr	r2, [pc, #232]	; (80003c0 <normalModeFunction+0x274>)
 80002d6:	6013      	str	r3, [r2, #0]
				statusTraffic2 = STATUS2_2;
 80002d8:	4b37      	ldr	r3, [pc, #220]	; (80003b8 <normalModeFunction+0x26c>)
 80002da:	2202      	movs	r2, #2
 80002dc:	601a      	str	r2, [r3, #0]
				update7SEGBufferTraffic2(counterLedYellow2);
 80002de:	4b38      	ldr	r3, [pc, #224]	; (80003c0 <normalModeFunction+0x274>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f99a 	bl	800061c <update7SEGBufferTraffic2>
			{
				onSingleGreenTraffic2();
				update7SEGBufferTraffic2(counterLedGreen2);
			}
		}
		break;
 80002e8:	e051      	b.n	800038e <normalModeFunction+0x242>
				onSingleGreenTraffic2();
 80002ea:	f000 fa19 	bl	8000720 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 80002ee:	4b33      	ldr	r3, [pc, #204]	; (80003bc <normalModeFunction+0x270>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 f992 	bl	800061c <update7SEGBufferTraffic2>
		break;
 80002f8:	e049      	b.n	800038e <normalModeFunction+0x242>
	case STATUS2_2:
		if (counterLedYellow2 > 0)
 80002fa:	4b31      	ldr	r3, [pc, #196]	; (80003c0 <normalModeFunction+0x274>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	dd47      	ble.n	8000392 <normalModeFunction+0x246>
		{
			counterLedYellow2--;
 8000302:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <normalModeFunction+0x274>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a2d      	ldr	r2, [pc, #180]	; (80003c0 <normalModeFunction+0x274>)
 800030a:	6013      	str	r3, [r2, #0]
			if (counterLedYellow2 <= 0)
 800030c:	4b2c      	ldr	r3, [pc, #176]	; (80003c0 <normalModeFunction+0x274>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	dc0e      	bgt.n	8000332 <normalModeFunction+0x1e6>
			{
				counterLedRed2 = durationLedRed;
 8000314:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <normalModeFunction+0x254>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a2a      	ldr	r2, [pc, #168]	; (80003c4 <normalModeFunction+0x278>)
 800031a:	6013      	str	r3, [r2, #0]
				statusTraffic2 = STATUS2_3;
 800031c:	4b26      	ldr	r3, [pc, #152]	; (80003b8 <normalModeFunction+0x26c>)
 800031e:	2203      	movs	r2, #3
 8000320:	601a      	str	r2, [r3, #0]
				onSingleRedTraffic2();
 8000322:	f000 f9ed 	bl	8000700 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <normalModeFunction+0x278>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4618      	mov	r0, r3
 800032c:	f000 f976 	bl	800061c <update7SEGBufferTraffic2>
			{
				onSingleYellowTraffic2();
				update7SEGBufferTraffic2(counterLedYellow2);
			}
		}
		break;
 8000330:	e02f      	b.n	8000392 <normalModeFunction+0x246>
				onSingleYellowTraffic2();
 8000332:	f000 f9ed 	bl	8000710 <onSingleYellowTraffic2>
				update7SEGBufferTraffic2(counterLedYellow2);
 8000336:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <normalModeFunction+0x274>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f96e 	bl	800061c <update7SEGBufferTraffic2>
		break;
 8000340:	e027      	b.n	8000392 <normalModeFunction+0x246>
	case STATUS2_3:
		if (counterLedRed2 > 0)
 8000342:	4b20      	ldr	r3, [pc, #128]	; (80003c4 <normalModeFunction+0x278>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	dd25      	ble.n	8000396 <normalModeFunction+0x24a>
		{
			counterLedRed2--;
 800034a:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <normalModeFunction+0x278>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	3b01      	subs	r3, #1
 8000350:	4a1c      	ldr	r2, [pc, #112]	; (80003c4 <normalModeFunction+0x278>)
 8000352:	6013      	str	r3, [r2, #0]
			if (counterLedRed2 <= 0)
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <normalModeFunction+0x278>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	dc0e      	bgt.n	800037a <normalModeFunction+0x22e>
			{
				counterLedGreen2 = durationLedGreen;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <normalModeFunction+0x25c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a16      	ldr	r2, [pc, #88]	; (80003bc <normalModeFunction+0x270>)
 8000362:	6013      	str	r3, [r2, #0]
				statusTraffic2 = STATUS2_1;
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <normalModeFunction+0x26c>)
 8000366:	2201      	movs	r2, #1
 8000368:	601a      	str	r2, [r3, #0]
				onSingleGreenTraffic2();
 800036a:	f000 f9d9 	bl	8000720 <onSingleGreenTraffic2>
				update7SEGBufferTraffic2(counterLedGreen2);
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <normalModeFunction+0x270>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f952 	bl	800061c <update7SEGBufferTraffic2>
			{
				onSingleRedTraffic2();
				update7SEGBufferTraffic2(counterLedRed2);
			}
		}
		break;
 8000378:	e00d      	b.n	8000396 <normalModeFunction+0x24a>
				onSingleRedTraffic2();
 800037a:	f000 f9c1 	bl	8000700 <onSingleRedTraffic2>
				update7SEGBufferTraffic2(counterLedRed2);
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <normalModeFunction+0x278>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f000 f94a 	bl	800061c <update7SEGBufferTraffic2>
		break;
 8000388:	e005      	b.n	8000396 <normalModeFunction+0x24a>
	default:
		break;
 800038a:	bf00      	nop
 800038c:	e004      	b.n	8000398 <normalModeFunction+0x24c>
		break;
 800038e:	bf00      	nop
 8000390:	e002      	b.n	8000398 <normalModeFunction+0x24c>
		break;
 8000392:	bf00      	nop
 8000394:	e000      	b.n	8000398 <normalModeFunction+0x24c>
		break;
 8000396:	bf00      	nop
	}
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200000c0 	.word	0x200000c0
 80003a0:	2000000c 	.word	0x2000000c
 80003a4:	200000e4 	.word	0x200000e4
 80003a8:	20000010 	.word	0x20000010
 80003ac:	200000d4 	.word	0x200000d4
 80003b0:	20000014 	.word	0x20000014
 80003b4:	200000d8 	.word	0x200000d8
 80003b8:	200000c4 	.word	0x200000c4
 80003bc:	200000e0 	.word	0x200000e0
 80003c0:	200000dc 	.word	0x200000dc
 80003c4:	200000d0 	.word	0x200000d0

080003c8 <getInput>:

int durationPressLongButton[3] = {100, 100, 100};
int durationPressShortButton[3] = {20, 20, 20};

void getInput()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++)
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	e0ab      	b.n	800052c <getInput+0x164>
	{
		state1Button[i] = state2Button[i];
 80003d4:	4a5a      	ldr	r2, [pc, #360]	; (8000540 <getInput+0x178>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003dc:	4959      	ldr	r1, [pc, #356]	; (8000544 <getInput+0x17c>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state2Button[i] = state3Button[i];
 80003e4:	4a58      	ldr	r2, [pc, #352]	; (8000548 <getInput+0x180>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ec:	4954      	ldr	r1, [pc, #336]	; (8000540 <getInput+0x178>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		state3Button[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 80003f4:	4a55      	ldr	r2, [pc, #340]	; (800054c <getInput+0x184>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003fc:	4954      	ldr	r1, [pc, #336]	; (8000550 <getInput+0x188>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000404:	4619      	mov	r1, r3
 8000406:	4610      	mov	r0, r2
 8000408:	f001 fc50 	bl	8001cac <HAL_GPIO_ReadPin>
 800040c:	4603      	mov	r3, r0
 800040e:	4619      	mov	r1, r3
 8000410:	4a4d      	ldr	r2, [pc, #308]	; (8000548 <getInput+0x180>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if ((state1Button[i] == state2Button[i]) && (state2Button[i] == state3Button[i]))
 8000418:	4a4a      	ldr	r2, [pc, #296]	; (8000544 <getInput+0x17c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000420:	4947      	ldr	r1, [pc, #284]	; (8000540 <getInput+0x178>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000428:	429a      	cmp	r2, r3
 800042a:	d177      	bne.n	800051c <getInput+0x154>
 800042c:	4a44      	ldr	r2, [pc, #272]	; (8000540 <getInput+0x178>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000434:	4944      	ldr	r1, [pc, #272]	; (8000548 <getInput+0x180>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800043c:	429a      	cmp	r2, r3
 800043e:	d16d      	bne.n	800051c <getInput+0x154>
		{
			if (state0Button[i] != state1Button[i])
 8000440:	4a44      	ldr	r2, [pc, #272]	; (8000554 <getInput+0x18c>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000448:	493e      	ldr	r1, [pc, #248]	; (8000544 <getInput+0x17c>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000450:	429a      	cmp	r2, r3
 8000452:	d029      	beq.n	80004a8 <getInput+0xe0>
			{
				switch (state0Button[i])
 8000454:	4a3f      	ldr	r2, [pc, #252]	; (8000554 <getInput+0x18c>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d002      	beq.n	8000466 <getInput+0x9e>
 8000460:	2b01      	cmp	r3, #1
 8000462:	d011      	beq.n	8000488 <getInput+0xc0>
					state0Button[i] = PRESSED_STATE;
					durationPressLongButton[i] = 100;
					durationPressShortButton[i] = 20;
					break;
				default:
					break;
 8000464:	e05f      	b.n	8000526 <getInput+0x15e>
					state0Button[i] = NORMAL_STATE;
 8000466:	4a3b      	ldr	r2, [pc, #236]	; (8000554 <getInput+0x18c>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2101      	movs	r1, #1
 800046c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (durationPressShortButton[i] > 0)
 8000470:	4a39      	ldr	r2, [pc, #228]	; (8000558 <getInput+0x190>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000478:	2b00      	cmp	r3, #0
 800047a:	dd51      	ble.n	8000520 <getInput+0x158>
						flagButton[i] = PRESSED_STATE;
 800047c:	4a37      	ldr	r2, [pc, #220]	; (800055c <getInput+0x194>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2100      	movs	r1, #0
 8000482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					break;
 8000486:	e04b      	b.n	8000520 <getInput+0x158>
					state0Button[i] = PRESSED_STATE;
 8000488:	4a32      	ldr	r2, [pc, #200]	; (8000554 <getInput+0x18c>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	2100      	movs	r1, #0
 800048e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					durationPressLongButton[i] = 100;
 8000492:	4a33      	ldr	r2, [pc, #204]	; (8000560 <getInput+0x198>)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2164      	movs	r1, #100	; 0x64
 8000498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					durationPressShortButton[i] = 20;
 800049c:	4a2e      	ldr	r2, [pc, #184]	; (8000558 <getInput+0x190>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2114      	movs	r1, #20
 80004a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					break;
 80004a6:	e03e      	b.n	8000526 <getInput+0x15e>
				}
			}
			else
			{
				switch (state0Button[i])
 80004a8:	4a2a      	ldr	r2, [pc, #168]	; (8000554 <getInput+0x18c>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <getInput+0xf0>
 80004b4:	2b01      	cmp	r3, #1
					{
						durationPressShortButton[i]--;
					}
					break;
				default:
					break;
 80004b6:	e036      	b.n	8000526 <getInput+0x15e>
					if (durationPressLongButton[i] > 0)
 80004b8:	4a29      	ldr	r2, [pc, #164]	; (8000560 <getInput+0x198>)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	dd1b      	ble.n	80004fc <getInput+0x134>
						durationPressLongButton[i]--;
 80004c4:	4a26      	ldr	r2, [pc, #152]	; (8000560 <getInput+0x198>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004cc:	1e5a      	subs	r2, r3, #1
 80004ce:	4924      	ldr	r1, [pc, #144]	; (8000560 <getInput+0x198>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (durationPressLongButton[i] <= 0)
 80004d6:	4a22      	ldr	r2, [pc, #136]	; (8000560 <getInput+0x198>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dc0c      	bgt.n	80004fc <getInput+0x134>
							flagButton[i] = PRESSED_STATE;
 80004e2:	4a1e      	ldr	r2, [pc, #120]	; (800055c <getInput+0x194>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2100      	movs	r1, #0
 80004e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							if (i == 1)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d104      	bne.n	80004fc <getInput+0x134>
								durationPressLongButton[i] = 10;
 80004f2:	4a1b      	ldr	r2, [pc, #108]	; (8000560 <getInput+0x198>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	210a      	movs	r1, #10
 80004f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if (durationPressShortButton[i] > 0)
 80004fc:	4a16      	ldr	r2, [pc, #88]	; (8000558 <getInput+0x190>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000504:	2b00      	cmp	r3, #0
 8000506:	dd0d      	ble.n	8000524 <getInput+0x15c>
						durationPressShortButton[i]--;
 8000508:	4a13      	ldr	r2, [pc, #76]	; (8000558 <getInput+0x190>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000510:	1e5a      	subs	r2, r3, #1
 8000512:	4911      	ldr	r1, [pc, #68]	; (8000558 <getInput+0x190>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					break;
 800051a:	e003      	b.n	8000524 <getInput+0x15c>
				}
			}
 800051c:	bf00      	nop
 800051e:	e002      	b.n	8000526 <getInput+0x15e>
					break;
 8000520:	bf00      	nop
 8000522:	e000      	b.n	8000526 <getInput+0x15e>
					break;
 8000524:	bf00      	nop
	for (int i = 0; i < 3; i++)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3301      	adds	r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b02      	cmp	r3, #2
 8000530:	f77f af50 	ble.w	80003d4 <getInput+0xc>
		}
	}
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000044 	.word	0x20000044
 8000544:	20000038 	.word	0x20000038
 8000548:	20000050 	.word	0x20000050
 800054c:	20000018 	.word	0x20000018
 8000550:	20000024 	.word	0x20000024
 8000554:	2000002c 	.word	0x2000002c
 8000558:	20000074 	.word	0x20000074
 800055c:	2000005c 	.word	0x2000005c
 8000560:	20000068 	.word	0x20000068

08000564 <update7SEGBuffer>:


#include "device_7SEG.h"

void update7SEGBuffer(int time, int index_traffic)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
	switch (index_traffic)
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d039      	beq.n	80005e8 <update7SEGBuffer+0x84>
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b03      	cmp	r3, #3
 8000578:	dc3a      	bgt.n	80005f0 <update7SEGBuffer+0x8c>
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d003      	beq.n	8000588 <update7SEGBuffer+0x24>
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	2b02      	cmp	r3, #2
 8000584:	d018      	beq.n	80005b8 <update7SEGBuffer+0x54>
		break;
	case 3:
		led_buffer[4] = time;
		break;
	default:
		break;
 8000586:	e033      	b.n	80005f0 <update7SEGBuffer+0x8c>
		led_buffer[0] = time / 10;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a1c      	ldr	r2, [pc, #112]	; (80005fc <update7SEGBuffer+0x98>)
 800058c:	fb82 1203 	smull	r1, r2, r2, r3
 8000590:	1092      	asrs	r2, r2, #2
 8000592:	17db      	asrs	r3, r3, #31
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	4a1a      	ldr	r2, [pc, #104]	; (8000600 <update7SEGBuffer+0x9c>)
 8000598:	6013      	str	r3, [r2, #0]
		led_buffer[1] = time % 10;
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <update7SEGBuffer+0x98>)
 800059e:	fb83 2301 	smull	r2, r3, r3, r1
 80005a2:	109a      	asrs	r2, r3, #2
 80005a4:	17cb      	asrs	r3, r1, #31
 80005a6:	1ad2      	subs	r2, r2, r3
 80005a8:	4613      	mov	r3, r2
 80005aa:	009b      	lsls	r3, r3, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	1aca      	subs	r2, r1, r3
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <update7SEGBuffer+0x9c>)
 80005b4:	605a      	str	r2, [r3, #4]
		break;
 80005b6:	e01c      	b.n	80005f2 <update7SEGBuffer+0x8e>
		led_buffer[2] = time / 10;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a10      	ldr	r2, [pc, #64]	; (80005fc <update7SEGBuffer+0x98>)
 80005bc:	fb82 1203 	smull	r1, r2, r2, r3
 80005c0:	1092      	asrs	r2, r2, #2
 80005c2:	17db      	asrs	r3, r3, #31
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <update7SEGBuffer+0x9c>)
 80005c8:	6093      	str	r3, [r2, #8]
		led_buffer[3] = time % 10;
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <update7SEGBuffer+0x98>)
 80005ce:	fb83 2301 	smull	r2, r3, r3, r1
 80005d2:	109a      	asrs	r2, r3, #2
 80005d4:	17cb      	asrs	r3, r1, #31
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1aca      	subs	r2, r1, r3
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <update7SEGBuffer+0x9c>)
 80005e4:	60da      	str	r2, [r3, #12]
		break;
 80005e6:	e004      	b.n	80005f2 <update7SEGBuffer+0x8e>
		led_buffer[4] = time;
 80005e8:	4a05      	ldr	r2, [pc, #20]	; (8000600 <update7SEGBuffer+0x9c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6113      	str	r3, [r2, #16]
		break;
 80005ee:	e000      	b.n	80005f2 <update7SEGBuffer+0x8e>
		break;
 80005f0:	bf00      	nop
	}
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	66666667 	.word	0x66666667
 8000600:	20000080 	.word	0x20000080

08000604 <update7SEGBufferTraffic1>:

void update7SEGBufferTraffic1(int time)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 1);
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff ffa8 	bl	8000564 <update7SEGBuffer>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <update7SEGBufferTraffic2>:

void update7SEGBufferTraffic2(int time)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 2);
 8000624:	2102      	movs	r1, #2
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ff9c 	bl	8000564 <update7SEGBuffer>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <update7SEGBufferMode>:

void update7SEGBufferMode(int time)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	update7SEGBuffer(time, 3);
 800063c:	2103      	movs	r1, #3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff90 	bl	8000564 <update7SEGBuffer>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <DISPLAYALL7SEG>:

void DISPLAYALL7SEG()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	Scan7SEG();
 8000650:	f000 f9fa 	bl	8000a48 <Scan7SEG>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <blinkingYELLOW>:
 */

#include "device_singleLED.h"

void blinkingYELLOW()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOW_ADVANCED_MODE);
 800065c:	2105      	movs	r1, #5
 800065e:	2008      	movs	r0, #8
 8000660:	f000 fb84 	bl	8000d6c <controlSingleLed>
	controlSingleLed(TRAFFIC2, YELLOW_ADVANCED_MODE);
 8000664:	2105      	movs	r1, #5
 8000666:	2009      	movs	r0, #9
 8000668:	f000 fb80 	bl	8000d6c <controlSingleLed>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <blinkingRED>:

void blinkingRED()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, RED_ADVANCED_MODE);
 8000674:	2103      	movs	r1, #3
 8000676:	2008      	movs	r0, #8
 8000678:	f000 fb78 	bl	8000d6c <controlSingleLed>
	controlSingleLed(TRAFFIC2, RED_ADVANCED_MODE);
 800067c:	2103      	movs	r1, #3
 800067e:	2009      	movs	r0, #9
 8000680:	f000 fb74 	bl	8000d6c <controlSingleLed>
}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}

08000688 <blinkingGREEN>:
void blinkingGREEN()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREEN_ADVANCED_MODE);
 800068c:	2104      	movs	r1, #4
 800068e:	2008      	movs	r0, #8
 8000690:	f000 fb6c 	bl	8000d6c <controlSingleLed>
	controlSingleLed(TRAFFIC2, GREEN_ADVANCED_MODE);
 8000694:	2104      	movs	r1, #4
 8000696:	2009      	movs	r0, #9
 8000698:	f000 fb68 	bl	8000d6c <controlSingleLed>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <offAllSingLEDs>:
void offAllSingLEDs()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, OFF);
 80006a4:	2106      	movs	r1, #6
 80006a6:	2008      	movs	r0, #8
 80006a8:	f000 fb60 	bl	8000d6c <controlSingleLed>
	controlSingleLed(TRAFFIC2, OFF);
 80006ac:	2106      	movs	r1, #6
 80006ae:	2009      	movs	r0, #9
 80006b0:	f000 fb5c 	bl	8000d6c <controlSingleLed>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <onAllSingLEDs>:
void onAllSingLEDs()
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, ON);
 80006bc:	2107      	movs	r1, #7
 80006be:	2008      	movs	r0, #8
 80006c0:	f000 fb54 	bl	8000d6c <controlSingleLed>
	controlSingleLed(TRAFFIC2, ON);
 80006c4:	2107      	movs	r1, #7
 80006c6:	2009      	movs	r0, #9
 80006c8:	f000 fb50 	bl	8000d6c <controlSingleLed>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <onSingleRedTraffic1>:
void onSingleRedTraffic1()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, RED_NORMAL_MODE);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2008      	movs	r0, #8
 80006d8:	f000 fb48 	bl	8000d6c <controlSingleLed>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <onSingleYellowTraffic1>:
void onSingleYellowTraffic1()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, YELLOW_NORMAL_MODE);
 80006e4:	2102      	movs	r1, #2
 80006e6:	2008      	movs	r0, #8
 80006e8:	f000 fb40 	bl	8000d6c <controlSingleLed>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <onSingleGreenTraffic1>:

void onSingleGreenTraffic1()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC1, GREEN_NORMAL_MODE);
 80006f4:	2101      	movs	r1, #1
 80006f6:	2008      	movs	r0, #8
 80006f8:	f000 fb38 	bl	8000d6c <controlSingleLed>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <onSingleRedTraffic2>:

void onSingleRedTraffic2()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, RED_NORMAL_MODE);
 8000704:	2100      	movs	r1, #0
 8000706:	2009      	movs	r0, #9
 8000708:	f000 fb30 	bl	8000d6c <controlSingleLed>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <onSingleYellowTraffic2>:
void onSingleYellowTraffic2()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, YELLOW_NORMAL_MODE);
 8000714:	2102      	movs	r1, #2
 8000716:	2009      	movs	r0, #9
 8000718:	f000 fb28 	bl	8000d6c <controlSingleLed>
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <onSingleGreenTraffic2>:

void onSingleGreenTraffic2()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	controlSingleLed(TRAFFIC2, GREEN_NORMAL_MODE);
 8000724:	2101      	movs	r1, #1
 8000726:	2009      	movs	r0, #9
 8000728:	f000 fb20 	bl	8000d6c <controlSingleLed>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <display7SEG>:
#define SEG7_5ON 5

int status7SEG = INIT;
int led_buffer[5] = {1, 2, 3, 4, 1};

void display7SEG(int count) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	if(count == 0) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d123      	bne.n	8000786 <display7SEG+0x56>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2101      	movs	r1, #1
 8000742:	48c0      	ldr	r0, [pc, #768]	; (8000a44 <display7SEG+0x314>)
 8000744:	f001 fac9 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2102      	movs	r1, #2
 800074c:	48bd      	ldr	r0, [pc, #756]	; (8000a44 <display7SEG+0x314>)
 800074e:	f001 fac4 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2104      	movs	r1, #4
 8000756:	48bb      	ldr	r0, [pc, #748]	; (8000a44 <display7SEG+0x314>)
 8000758:	f001 fabf 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2108      	movs	r1, #8
 8000760:	48b8      	ldr	r0, [pc, #736]	; (8000a44 <display7SEG+0x314>)
 8000762:	f001 faba 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2110      	movs	r1, #16
 800076a:	48b6      	ldr	r0, [pc, #728]	; (8000a44 <display7SEG+0x314>)
 800076c:	f001 fab5 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	48b3      	ldr	r0, [pc, #716]	; (8000a44 <display7SEG+0x314>)
 8000776:	f001 fab0 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	48b1      	ldr	r0, [pc, #708]	; (8000a44 <display7SEG+0x314>)
 8000780:	f001 faab 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,SET);
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,RESET);
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
	}
}
 8000784:	e15a      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 1) {
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d123      	bne.n	80007d4 <display7SEG+0xa4>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2101      	movs	r1, #1
 8000790:	48ac      	ldr	r0, [pc, #688]	; (8000a44 <display7SEG+0x314>)
 8000792:	f001 faa2 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2102      	movs	r1, #2
 800079a:	48aa      	ldr	r0, [pc, #680]	; (8000a44 <display7SEG+0x314>)
 800079c:	f001 fa9d 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2104      	movs	r1, #4
 80007a4:	48a7      	ldr	r0, [pc, #668]	; (8000a44 <display7SEG+0x314>)
 80007a6:	f001 fa98 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2108      	movs	r1, #8
 80007ae:	48a5      	ldr	r0, [pc, #660]	; (8000a44 <display7SEG+0x314>)
 80007b0:	f001 fa93 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2110      	movs	r1, #16
 80007b8:	48a2      	ldr	r0, [pc, #648]	; (8000a44 <display7SEG+0x314>)
 80007ba:	f001 fa8e 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2120      	movs	r1, #32
 80007c2:	48a0      	ldr	r0, [pc, #640]	; (8000a44 <display7SEG+0x314>)
 80007c4:	f001 fa89 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	2140      	movs	r1, #64	; 0x40
 80007cc:	489d      	ldr	r0, [pc, #628]	; (8000a44 <display7SEG+0x314>)
 80007ce:	f001 fa84 	bl	8001cda <HAL_GPIO_WritePin>
}
 80007d2:	e133      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 2) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	d123      	bne.n	8000822 <display7SEG+0xf2>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2101      	movs	r1, #1
 80007de:	4899      	ldr	r0, [pc, #612]	; (8000a44 <display7SEG+0x314>)
 80007e0:	f001 fa7b 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2102      	movs	r1, #2
 80007e8:	4896      	ldr	r0, [pc, #600]	; (8000a44 <display7SEG+0x314>)
 80007ea:	f001 fa76 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2104      	movs	r1, #4
 80007f2:	4894      	ldr	r0, [pc, #592]	; (8000a44 <display7SEG+0x314>)
 80007f4:	f001 fa71 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2108      	movs	r1, #8
 80007fc:	4891      	ldr	r0, [pc, #580]	; (8000a44 <display7SEG+0x314>)
 80007fe:	f001 fa6c 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2110      	movs	r1, #16
 8000806:	488f      	ldr	r0, [pc, #572]	; (8000a44 <display7SEG+0x314>)
 8000808:	f001 fa67 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2120      	movs	r1, #32
 8000810:	488c      	ldr	r0, [pc, #560]	; (8000a44 <display7SEG+0x314>)
 8000812:	f001 fa62 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	488a      	ldr	r0, [pc, #552]	; (8000a44 <display7SEG+0x314>)
 800081c:	f001 fa5d 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000820:	e10c      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 3) {
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b03      	cmp	r3, #3
 8000826:	d123      	bne.n	8000870 <display7SEG+0x140>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2101      	movs	r1, #1
 800082c:	4885      	ldr	r0, [pc, #532]	; (8000a44 <display7SEG+0x314>)
 800082e:	f001 fa54 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2102      	movs	r1, #2
 8000836:	4883      	ldr	r0, [pc, #524]	; (8000a44 <display7SEG+0x314>)
 8000838:	f001 fa4f 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	2104      	movs	r1, #4
 8000840:	4880      	ldr	r0, [pc, #512]	; (8000a44 <display7SEG+0x314>)
 8000842:	f001 fa4a 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	487e      	ldr	r0, [pc, #504]	; (8000a44 <display7SEG+0x314>)
 800084c:	f001 fa45 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2110      	movs	r1, #16
 8000854:	487b      	ldr	r0, [pc, #492]	; (8000a44 <display7SEG+0x314>)
 8000856:	f001 fa40 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2120      	movs	r1, #32
 800085e:	4879      	ldr	r0, [pc, #484]	; (8000a44 <display7SEG+0x314>)
 8000860:	f001 fa3b 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	4876      	ldr	r0, [pc, #472]	; (8000a44 <display7SEG+0x314>)
 800086a:	f001 fa36 	bl	8001cda <HAL_GPIO_WritePin>
}
 800086e:	e0e5      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 4) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b04      	cmp	r3, #4
 8000874:	d123      	bne.n	80008be <display7SEG+0x18e>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2101      	movs	r1, #1
 800087a:	4872      	ldr	r0, [pc, #456]	; (8000a44 <display7SEG+0x314>)
 800087c:	f001 fa2d 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 8000880:	2200      	movs	r2, #0
 8000882:	2102      	movs	r1, #2
 8000884:	486f      	ldr	r0, [pc, #444]	; (8000a44 <display7SEG+0x314>)
 8000886:	f001 fa28 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	2104      	movs	r1, #4
 800088e:	486d      	ldr	r0, [pc, #436]	; (8000a44 <display7SEG+0x314>)
 8000890:	f001 fa23 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2108      	movs	r1, #8
 8000898:	486a      	ldr	r0, [pc, #424]	; (8000a44 <display7SEG+0x314>)
 800089a:	f001 fa1e 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	4868      	ldr	r0, [pc, #416]	; (8000a44 <display7SEG+0x314>)
 80008a4:	f001 fa19 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2120      	movs	r1, #32
 80008ac:	4865      	ldr	r0, [pc, #404]	; (8000a44 <display7SEG+0x314>)
 80008ae:	f001 fa14 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2140      	movs	r1, #64	; 0x40
 80008b6:	4863      	ldr	r0, [pc, #396]	; (8000a44 <display7SEG+0x314>)
 80008b8:	f001 fa0f 	bl	8001cda <HAL_GPIO_WritePin>
}
 80008bc:	e0be      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 5) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b05      	cmp	r3, #5
 80008c2:	d123      	bne.n	800090c <display7SEG+0x1dc>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2101      	movs	r1, #1
 80008c8:	485e      	ldr	r0, [pc, #376]	; (8000a44 <display7SEG+0x314>)
 80008ca:	f001 fa06 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2102      	movs	r1, #2
 80008d2:	485c      	ldr	r0, [pc, #368]	; (8000a44 <display7SEG+0x314>)
 80008d4:	f001 fa01 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2104      	movs	r1, #4
 80008dc:	4859      	ldr	r0, [pc, #356]	; (8000a44 <display7SEG+0x314>)
 80008de:	f001 f9fc 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	4857      	ldr	r0, [pc, #348]	; (8000a44 <display7SEG+0x314>)
 80008e8:	f001 f9f7 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	4854      	ldr	r0, [pc, #336]	; (8000a44 <display7SEG+0x314>)
 80008f2:	f001 f9f2 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	4852      	ldr	r0, [pc, #328]	; (8000a44 <display7SEG+0x314>)
 80008fc:	f001 f9ed 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2140      	movs	r1, #64	; 0x40
 8000904:	484f      	ldr	r0, [pc, #316]	; (8000a44 <display7SEG+0x314>)
 8000906:	f001 f9e8 	bl	8001cda <HAL_GPIO_WritePin>
}
 800090a:	e097      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 6) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b06      	cmp	r3, #6
 8000910:	d123      	bne.n	800095a <display7SEG+0x22a>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2101      	movs	r1, #1
 8000916:	484b      	ldr	r0, [pc, #300]	; (8000a44 <display7SEG+0x314>)
 8000918:	f001 f9df 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2102      	movs	r1, #2
 8000920:	4848      	ldr	r0, [pc, #288]	; (8000a44 <display7SEG+0x314>)
 8000922:	f001 f9da 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2104      	movs	r1, #4
 800092a:	4846      	ldr	r0, [pc, #280]	; (8000a44 <display7SEG+0x314>)
 800092c:	f001 f9d5 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2108      	movs	r1, #8
 8000934:	4843      	ldr	r0, [pc, #268]	; (8000a44 <display7SEG+0x314>)
 8000936:	f001 f9d0 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2110      	movs	r1, #16
 800093e:	4841      	ldr	r0, [pc, #260]	; (8000a44 <display7SEG+0x314>)
 8000940:	f001 f9cb 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2120      	movs	r1, #32
 8000948:	483e      	ldr	r0, [pc, #248]	; (8000a44 <display7SEG+0x314>)
 800094a:	f001 f9c6 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	; 0x40
 8000952:	483c      	ldr	r0, [pc, #240]	; (8000a44 <display7SEG+0x314>)
 8000954:	f001 f9c1 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000958:	e070      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 7) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d123      	bne.n	80009a8 <display7SEG+0x278>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2101      	movs	r1, #1
 8000964:	4837      	ldr	r0, [pc, #220]	; (8000a44 <display7SEG+0x314>)
 8000966:	f001 f9b8 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2102      	movs	r1, #2
 800096e:	4835      	ldr	r0, [pc, #212]	; (8000a44 <display7SEG+0x314>)
 8000970:	f001 f9b3 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2104      	movs	r1, #4
 8000978:	4832      	ldr	r0, [pc, #200]	; (8000a44 <display7SEG+0x314>)
 800097a:	f001 f9ae 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2108      	movs	r1, #8
 8000982:	4830      	ldr	r0, [pc, #192]	; (8000a44 <display7SEG+0x314>)
 8000984:	f001 f9a9 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2110      	movs	r1, #16
 800098c:	482d      	ldr	r0, [pc, #180]	; (8000a44 <display7SEG+0x314>)
 800098e:	f001 f9a4 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2120      	movs	r1, #32
 8000996:	482b      	ldr	r0, [pc, #172]	; (8000a44 <display7SEG+0x314>)
 8000998:	f001 f99f 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	4828      	ldr	r0, [pc, #160]	; (8000a44 <display7SEG+0x314>)
 80009a2:	f001 f99a 	bl	8001cda <HAL_GPIO_WritePin>
}
 80009a6:	e049      	b.n	8000a3c <display7SEG+0x30c>
	else if(count == 8) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b08      	cmp	r3, #8
 80009ac:	d123      	bne.n	80009f6 <display7SEG+0x2c6>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2101      	movs	r1, #1
 80009b2:	4824      	ldr	r0, [pc, #144]	; (8000a44 <display7SEG+0x314>)
 80009b4:	f001 f991 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2102      	movs	r1, #2
 80009bc:	4821      	ldr	r0, [pc, #132]	; (8000a44 <display7SEG+0x314>)
 80009be:	f001 f98c 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2104      	movs	r1, #4
 80009c6:	481f      	ldr	r0, [pc, #124]	; (8000a44 <display7SEG+0x314>)
 80009c8:	f001 f987 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2108      	movs	r1, #8
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <display7SEG+0x314>)
 80009d2:	f001 f982 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2110      	movs	r1, #16
 80009da:	481a      	ldr	r0, [pc, #104]	; (8000a44 <display7SEG+0x314>)
 80009dc:	f001 f97d 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2120      	movs	r1, #32
 80009e4:	4817      	ldr	r0, [pc, #92]	; (8000a44 <display7SEG+0x314>)
 80009e6:	f001 f978 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4815      	ldr	r0, [pc, #84]	; (8000a44 <display7SEG+0x314>)
 80009f0:	f001 f973 	bl	8001cda <HAL_GPIO_WritePin>
}
 80009f4:	e022      	b.n	8000a3c <display7SEG+0x30c>
		HAL_GPIO_WritePin(A_GPIO_Port,A_Pin,RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2101      	movs	r1, #1
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <display7SEG+0x314>)
 80009fc:	f001 f96d 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port,B_Pin,RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	480f      	ldr	r0, [pc, #60]	; (8000a44 <display7SEG+0x314>)
 8000a06:	f001 f968 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port,C_Pin,RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	480d      	ldr	r0, [pc, #52]	; (8000a44 <display7SEG+0x314>)
 8000a10:	f001 f963 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port,D_Pin,RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2108      	movs	r1, #8
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <display7SEG+0x314>)
 8000a1a:	f001 f95e 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port,E_Pin,SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2110      	movs	r1, #16
 8000a22:	4808      	ldr	r0, [pc, #32]	; (8000a44 <display7SEG+0x314>)
 8000a24:	f001 f959 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port,F_Pin,RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <display7SEG+0x314>)
 8000a2e:	f001 f954 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port,G_Pin,RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <display7SEG+0x314>)
 8000a38:	f001 f94f 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40010c00 	.word	0x40010c00

08000a48 <Scan7SEG>:

void Scan7SEG()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	switch (status7SEG)
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <Scan7SEG+0x134>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b05      	cmp	r3, #5
 8000a52:	f200 808f 	bhi.w	8000b74 <Scan7SEG+0x12c>
 8000a56:	a201      	add	r2, pc, #4	; (adr r2, 8000a5c <Scan7SEG+0x14>)
 8000a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a5c:	08000a75 	.word	0x08000a75
 8000a60:	08000abf 	.word	0x08000abf
 8000a64:	08000ae1 	.word	0x08000ae1
 8000a68:	08000b05 	.word	0x08000b05
 8000a6c:	08000b2b 	.word	0x08000b2b
 8000a70:	08000b51 	.word	0x08000b51
	{
	case INIT:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2140      	movs	r1, #64	; 0x40
 8000a78:	4841      	ldr	r0, [pc, #260]	; (8000b80 <Scan7SEG+0x138>)
 8000a7a:	f001 f92e 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	483f      	ldr	r0, [pc, #252]	; (8000b80 <Scan7SEG+0x138>)
 8000a84:	f001 f929 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8e:	483c      	ldr	r0, [pc, #240]	; (8000b80 <Scan7SEG+0x138>)
 8000a90:	f001 f923 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	4839      	ldr	r0, [pc, #228]	; (8000b80 <Scan7SEG+0x138>)
 8000a9c:	f001 f91d 	bl	8001cda <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aa6:	4837      	ldr	r0, [pc, #220]	; (8000b84 <Scan7SEG+0x13c>)
 8000aa8:	f001 f917 	bl	8001cda <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <Scan7SEG+0x140>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fe3d 	bl	8000730 <display7SEG>
		status7SEG = SEG7_1ON;
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <Scan7SEG+0x134>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
		break;
 8000abc:	e05b      	b.n	8000b76 <Scan7SEG+0x12e>
	case SEG7_1ON:
		HAL_GPIO_TogglePin(EN0_GPIO_Port, EN0_Pin);
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	482f      	ldr	r0, [pc, #188]	; (8000b80 <Scan7SEG+0x138>)
 8000ac2:	f001 f922 	bl	8001d0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(EN1_GPIO_Port, EN1_Pin);
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	482d      	ldr	r0, [pc, #180]	; (8000b80 <Scan7SEG+0x138>)
 8000aca:	f001 f91e 	bl	8001d0a <HAL_GPIO_TogglePin>
		display7SEG(led_buffer[1]);
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <Scan7SEG+0x140>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fe2c 	bl	8000730 <display7SEG>
		status7SEG = SEG7_2ON;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <Scan7SEG+0x134>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	601a      	str	r2, [r3, #0]
		break;
 8000ade:	e04a      	b.n	8000b76 <Scan7SEG+0x12e>
	case SEG7_2ON:
		HAL_GPIO_TogglePin(EN1_GPIO_Port, EN1_Pin);
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	4827      	ldr	r0, [pc, #156]	; (8000b80 <Scan7SEG+0x138>)
 8000ae4:	f001 f911 	bl	8001d0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(EN2_GPIO_Port, EN2_Pin);
 8000ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aec:	4824      	ldr	r0, [pc, #144]	; (8000b80 <Scan7SEG+0x138>)
 8000aee:	f001 f90c 	bl	8001d0a <HAL_GPIO_TogglePin>
		display7SEG(led_buffer[2]);
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <Scan7SEG+0x140>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fe1a 	bl	8000730 <display7SEG>
		status7SEG = SEG7_3ON;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <Scan7SEG+0x134>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	601a      	str	r2, [r3, #0]
		break;
 8000b02:	e038      	b.n	8000b76 <Scan7SEG+0x12e>
	case SEG7_3ON:
		HAL_GPIO_TogglePin(EN2_GPIO_Port, EN2_Pin);
 8000b04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b08:	481d      	ldr	r0, [pc, #116]	; (8000b80 <Scan7SEG+0x138>)
 8000b0a:	f001 f8fe 	bl	8001d0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(EN3_GPIO_Port, EN3_Pin);
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	481b      	ldr	r0, [pc, #108]	; (8000b80 <Scan7SEG+0x138>)
 8000b14:	f001 f8f9 	bl	8001d0a <HAL_GPIO_TogglePin>
		status7SEG = SEG7_4ON;
 8000b18:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <Scan7SEG+0x134>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	601a      	str	r2, [r3, #0]
		display7SEG(led_buffer[3]);
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <Scan7SEG+0x140>)
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fe04 	bl	8000730 <display7SEG>
		break;
 8000b28:	e025      	b.n	8000b76 <Scan7SEG+0x12e>
	case SEG7_4ON:
		HAL_GPIO_TogglePin(EN3_GPIO_Port, EN3_Pin);
 8000b2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b2e:	4814      	ldr	r0, [pc, #80]	; (8000b80 <Scan7SEG+0x138>)
 8000b30:	f001 f8eb 	bl	8001d0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(EN4_GPIO_Port, EN4_Pin);
 8000b34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b38:	4812      	ldr	r0, [pc, #72]	; (8000b84 <Scan7SEG+0x13c>)
 8000b3a:	f001 f8e6 	bl	8001d0a <HAL_GPIO_TogglePin>
		status7SEG = SEG7_5ON;
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <Scan7SEG+0x134>)
 8000b40:	2205      	movs	r2, #5
 8000b42:	601a      	str	r2, [r3, #0]
		display7SEG(led_buffer[4]);
 8000b44:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <Scan7SEG+0x140>)
 8000b46:	691b      	ldr	r3, [r3, #16]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fdf1 	bl	8000730 <display7SEG>
		break;
 8000b4e:	e012      	b.n	8000b76 <Scan7SEG+0x12e>
	case SEG7_5ON:
		HAL_GPIO_TogglePin(EN4_GPIO_Port, EN4_Pin);
 8000b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <Scan7SEG+0x13c>)
 8000b56:	f001 f8d8 	bl	8001d0a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(EN0_GPIO_Port, EN0_Pin);
 8000b5a:	2140      	movs	r1, #64	; 0x40
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <Scan7SEG+0x138>)
 8000b5e:	f001 f8d4 	bl	8001d0a <HAL_GPIO_TogglePin>
		status7SEG = SEG7_1ON;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <Scan7SEG+0x134>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
		display7SEG(led_buffer[0]);
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <Scan7SEG+0x140>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fddf 	bl	8000730 <display7SEG>
		break;
 8000b72:	e000      	b.n	8000b76 <Scan7SEG+0x12e>
	default:
		break;
 8000b74:	bf00      	nop
	}
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000c8 	.word	0x200000c8
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	20000080 	.word	0x20000080

08000b8c <led_red_1_on>:
 *      Author: QUI
 */

#include "led_traffic.h"

void led_red_1_on() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port,LED_RED_1_Pin, RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b96:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <led_red_1_on+0x2c>)
 8000b98:	f001 f89f 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <led_red_1_on+0x2c>)
 8000ba4:	f001 f899 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bae:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <led_red_1_on+0x2c>)
 8000bb0:	f001 f893 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010800 	.word	0x40010800

08000bbc <led_yellow_1_on>:

void led_yellow_1_on() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port,LED_RED_1_Pin, SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bc6:	4808      	ldr	r0, [pc, #32]	; (8000be8 <led_yellow_1_on+0x2c>)
 8000bc8:	f001 f887 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <led_yellow_1_on+0x2c>)
 8000bd4:	f001 f881 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bde:	4802      	ldr	r0, [pc, #8]	; (8000be8 <led_yellow_1_on+0x2c>)
 8000be0:	f001 f87b 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010800 	.word	0x40010800

08000bec <led_green_1_on>:

void led_green_1_on() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port,LED_RED_1_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf6:	4808      	ldr	r0, [pc, #32]	; (8000c18 <led_green_1_on+0x2c>)
 8000bf8:	f001 f86f 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <led_green_1_on+0x2c>)
 8000c04:	f001 f869 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <led_green_1_on+0x2c>)
 8000c10:	f001 f863 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010800 	.word	0x40010800

08000c1c <led_red_2_on>:

void led_red_2_on() {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port,LED_RED_2_Pin, RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c26:	4808      	ldr	r0, [pc, #32]	; (8000c48 <led_red_2_on+0x2c>)
 8000c28:	f001 f857 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <led_red_2_on+0x2c>)
 8000c34:	f001 f851 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3e:	4802      	ldr	r0, [pc, #8]	; (8000c48 <led_red_2_on+0x2c>)
 8000c40:	f001 f84b 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40010800 	.word	0x40010800

08000c4c <led_yellow_2_on>:

void led_yellow_2_on() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port,LED_RED_2_Pin, SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <led_yellow_2_on+0x2c>)
 8000c58:	f001 f83f 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <led_yellow_2_on+0x2c>)
 8000c64:	f001 f839 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6e:	4802      	ldr	r0, [pc, #8]	; (8000c78 <led_yellow_2_on+0x2c>)
 8000c70:	f001 f833 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010800 	.word	0x40010800

08000c7c <led_green_2_on>:

void led_green_2_on() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port,LED_RED_2_Pin, SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <led_green_2_on+0x2c>)
 8000c88:	f001 f827 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <led_green_2_on+0x2c>)
 8000c94:	f001 f821 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9e:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <led_green_2_on+0x2c>)
 8000ca0:	f001 f81b 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40010800 	.word	0x40010800

08000cac <on_traffic_1>:

void on_traffic_1() {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port,LED_RED_1_Pin, RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb6:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <on_traffic_1+0x2c>)
 8000cb8:	f001 f80f 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <on_traffic_1+0x2c>)
 8000cc4:	f001 f809 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <on_traffic_1+0x2c>)
 8000cd0:	f001 f803 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40010800 	.word	0x40010800

08000cdc <off_traffic_1>:

void off_traffic_1() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port,LED_RED_1_Pin, SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce6:	4808      	ldr	r0, [pc, #32]	; (8000d08 <off_traffic_1+0x2c>)
 8000ce8:	f000 fff7 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <off_traffic_1+0x2c>)
 8000cf4:	f000 fff1 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfe:	4802      	ldr	r0, [pc, #8]	; (8000d08 <off_traffic_1+0x2c>)
 8000d00:	f000 ffeb 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40010800 	.word	0x40010800

08000d0c <on_traffic_2>:

void on_traffic_2() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port,LED_RED_2_Pin, RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <on_traffic_2+0x2c>)
 8000d18:	f000 ffdf 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <on_traffic_2+0x2c>)
 8000d24:	f000 ffd9 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d2e:	4802      	ldr	r0, [pc, #8]	; (8000d38 <on_traffic_2+0x2c>)
 8000d30:	f000 ffd3 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40010800 	.word	0x40010800

08000d3c <off_traffic_2>:

void off_traffic_2() {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_2_GPIO_Port,LED_RED_2_Pin, SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <off_traffic_2+0x2c>)
 8000d48:	f000 ffc7 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin, SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d52:	4805      	ldr	r0, [pc, #20]	; (8000d68 <off_traffic_2+0x2c>)
 8000d54:	f000 ffc1 	bl	8001cda <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin, SET);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d5e:	4802      	ldr	r0, [pc, #8]	; (8000d68 <off_traffic_2+0x2c>)
 8000d60:	f000 ffbb 	bl	8001cda <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010800 	.word	0x40010800

08000d6c <controlSingleLed>:

void controlSingleLed(int orderTraffic, int statusLed)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	switch (orderTraffic)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d003      	beq.n	8000d84 <controlSingleLed+0x18>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b09      	cmp	r3, #9
 8000d80:	d039      	beq.n	8000df6 <controlSingleLed+0x8a>
		default:
			break;
		}
		break;
	default:
		break;
 8000d82:	e072      	b.n	8000e6a <controlSingleLed+0xfe>
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2b07      	cmp	r3, #7
 8000d88:	d833      	bhi.n	8000df2 <controlSingleLed+0x86>
 8000d8a:	a201      	add	r2, pc, #4	; (adr r2, 8000d90 <controlSingleLed+0x24>)
 8000d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d90:	08000db1 	.word	0x08000db1
 8000d94:	08000db7 	.word	0x08000db7
 8000d98:	08000dbd 	.word	0x08000dbd
 8000d9c:	08000dc3 	.word	0x08000dc3
 8000da0:	08000ddb 	.word	0x08000ddb
 8000da4:	08000dcf 	.word	0x08000dcf
 8000da8:	08000de7 	.word	0x08000de7
 8000dac:	08000ded 	.word	0x08000ded
			led_red_1_on();
 8000db0:	f7ff feec 	bl	8000b8c <led_red_1_on>
			break;
 8000db4:	e01e      	b.n	8000df4 <controlSingleLed+0x88>
			led_green_1_on();
 8000db6:	f7ff ff19 	bl	8000bec <led_green_1_on>
			break;
 8000dba:	e01b      	b.n	8000df4 <controlSingleLed+0x88>
			led_yellow_1_on();
 8000dbc:	f7ff fefe 	bl	8000bbc <led_yellow_1_on>
			break;
 8000dc0:	e018      	b.n	8000df4 <controlSingleLed+0x88>
			HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc6:	482b      	ldr	r0, [pc, #172]	; (8000e74 <controlSingleLed+0x108>)
 8000dc8:	f000 ff9f 	bl	8001d0a <HAL_GPIO_TogglePin>
			break;
 8000dcc:	e012      	b.n	8000df4 <controlSingleLed+0x88>
			HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 8000dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd2:	4828      	ldr	r0, [pc, #160]	; (8000e74 <controlSingleLed+0x108>)
 8000dd4:	f000 ff99 	bl	8001d0a <HAL_GPIO_TogglePin>
			break;
 8000dd8:	e00c      	b.n	8000df4 <controlSingleLed+0x88>
			HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dde:	4825      	ldr	r0, [pc, #148]	; (8000e74 <controlSingleLed+0x108>)
 8000de0:	f000 ff93 	bl	8001d0a <HAL_GPIO_TogglePin>
			break;
 8000de4:	e006      	b.n	8000df4 <controlSingleLed+0x88>
			off_traffic_1();
 8000de6:	f7ff ff79 	bl	8000cdc <off_traffic_1>
			break;
 8000dea:	e003      	b.n	8000df4 <controlSingleLed+0x88>
			on_traffic_1();
 8000dec:	f7ff ff5e 	bl	8000cac <on_traffic_1>
			break;
 8000df0:	e000      	b.n	8000df4 <controlSingleLed+0x88>
			break;
 8000df2:	bf00      	nop
		break;
 8000df4:	e039      	b.n	8000e6a <controlSingleLed+0xfe>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2b07      	cmp	r3, #7
 8000dfa:	d834      	bhi.n	8000e66 <controlSingleLed+0xfa>
 8000dfc:	a201      	add	r2, pc, #4	; (adr r2, 8000e04 <controlSingleLed+0x98>)
 8000dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e02:	bf00      	nop
 8000e04:	08000e25 	.word	0x08000e25
 8000e08:	08000e2b 	.word	0x08000e2b
 8000e0c:	08000e31 	.word	0x08000e31
 8000e10:	08000e37 	.word	0x08000e37
 8000e14:	08000e4f 	.word	0x08000e4f
 8000e18:	08000e43 	.word	0x08000e43
 8000e1c:	08000e5b 	.word	0x08000e5b
 8000e20:	08000e61 	.word	0x08000e61
			led_red_2_on();
 8000e24:	f7ff fefa 	bl	8000c1c <led_red_2_on>
			break;
 8000e28:	e01e      	b.n	8000e68 <controlSingleLed+0xfc>
			led_green_2_on();
 8000e2a:	f7ff ff27 	bl	8000c7c <led_green_2_on>
			break;
 8000e2e:	e01b      	b.n	8000e68 <controlSingleLed+0xfc>
			led_yellow_2_on();
 8000e30:	f7ff ff0c 	bl	8000c4c <led_yellow_2_on>
			break;
 8000e34:	e018      	b.n	8000e68 <controlSingleLed+0xfc>
			HAL_GPIO_TogglePin(LED_RED_2_GPIO_Port, LED_RED_2_Pin);
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <controlSingleLed+0x108>)
 8000e3c:	f000 ff65 	bl	8001d0a <HAL_GPIO_TogglePin>
			break;
 8000e40:	e012      	b.n	8000e68 <controlSingleLed+0xfc>
			HAL_GPIO_TogglePin(LED_YELLOW_2_GPIO_Port, LED_YELLOW_2_Pin);
 8000e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <controlSingleLed+0x108>)
 8000e48:	f000 ff5f 	bl	8001d0a <HAL_GPIO_TogglePin>
			break;
 8000e4c:	e00c      	b.n	8000e68 <controlSingleLed+0xfc>
			HAL_GPIO_TogglePin(LED_GREEN_2_GPIO_Port, LED_GREEN_2_Pin);
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <controlSingleLed+0x108>)
 8000e54:	f000 ff59 	bl	8001d0a <HAL_GPIO_TogglePin>
			break;
 8000e58:	e006      	b.n	8000e68 <controlSingleLed+0xfc>
			off_traffic_2();
 8000e5a:	f7ff ff6f 	bl	8000d3c <off_traffic_2>
			break;
 8000e5e:	e003      	b.n	8000e68 <controlSingleLed+0xfc>
			on_traffic_2();
 8000e60:	f7ff ff54 	bl	8000d0c <on_traffic_2>
			break;
 8000e64:	e000      	b.n	8000e68 <controlSingleLed+0xfc>
			break;
 8000e66:	bf00      	nop
		break;
 8000e68:	bf00      	nop
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010800 	.word	0x40010800

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 fc2c 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f9d6 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 fa5c 	bl	8001340 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e88:	f000 fa0e 	bl	80012a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e8c:	48a2      	ldr	r0, [pc, #648]	; (8001118 <main+0x2a0>)
 8000e8e:	f001 fb81 	bl	8002594 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */
  /* USER CODE BEGIN WHILE */
  	offAllSingLEDs();
 8000e92:	f7ff fc05 	bl	80006a0 <offAllSingLEDs>
  	normalModeFunction();
 8000e96:	f7ff f959 	bl	800014c <normalModeFunction>
  	setTimer2(100);
 8000e9a:	2064      	movs	r0, #100	; 0x64
 8000e9c:	f000 fbba 	bl	8001614 <setTimer2>
  	DISPLAYALL7SEG();
 8000ea0:	f7ff fbd4 	bl	800064c <DISPLAYALL7SEG>
  	setTimer4(20);
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	f000 fbdd 	bl	8001664 <setTimer4>
  	setTimer1(1);
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f000 fb9e 	bl	80015ec <setTimer1>
  	while (1)
  	{
  		if (flag1 == 1) // flag for button
 8000eb0:	4b9a      	ldr	r3, [pc, #616]	; (800111c <main+0x2a4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	f040 8167 	bne.w	8001188 <main+0x310>
  		{
  			setTimer1(1);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 fb96 	bl	80015ec <setTimer1>
  			getInput();
 8000ec0:	f7ff fa82 	bl	80003c8 <getInput>
  			if (flagButton[0] == PRESSED_STATE)
 8000ec4:	4b96      	ldr	r3, [pc, #600]	; (8001120 <main+0x2a8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f040 80a5 	bne.w	8001018 <main+0x1a0>
  			{
  				flagButton[0] = NORMAL_STATE;
 8000ece:	4b94      	ldr	r3, [pc, #592]	; (8001120 <main+0x2a8>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
  				switch (modeStatus)
 8000ed4:	4b93      	ldr	r3, [pc, #588]	; (8001124 <main+0x2ac>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	f200 809f 	bhi.w	800101c <main+0x1a4>
 8000ede:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <main+0x6c>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000ef9 	.word	0x08000ef9
 8000ee8:	08000f3d 	.word	0x08000f3d
 8000eec:	08000f73 	.word	0x08000f73
 8000ef0:	08000fa9 	.word	0x08000fa9
 8000ef4:	08000fdf 	.word	0x08000fdf
  				{
  				case INITMODE:
  					modeStatus = MODE1;
 8000ef8:	4b8a      	ldr	r3, [pc, #552]	; (8001124 <main+0x2ac>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode = 0;
 8000efe:	4b8a      	ldr	r3, [pc, #552]	; (8001128 <main+0x2b0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
  					tempDurationLedGreen = durationLedGreen;
 8000f04:	4b89      	ldr	r3, [pc, #548]	; (800112c <main+0x2b4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a89      	ldr	r2, [pc, #548]	; (8001130 <main+0x2b8>)
 8000f0a:	6013      	str	r3, [r2, #0]
  					tempDurationLedRed = durationLedRed;
 8000f0c:	4b89      	ldr	r3, [pc, #548]	; (8001134 <main+0x2bc>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a89      	ldr	r2, [pc, #548]	; (8001138 <main+0x2c0>)
 8000f12:	6013      	str	r3, [r2, #0]
  					tempDurationLedYellow = durationLedYellow;
 8000f14:	4b89      	ldr	r3, [pc, #548]	; (800113c <main+0x2c4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a89      	ldr	r2, [pc, #548]	; (8001140 <main+0x2c8>)
 8000f1a:	6013      	str	r3, [r2, #0]
  					offAllSingLEDs();
 8000f1c:	f7ff fbc0 	bl	80006a0 <offAllSingLEDs>
  					update7SEGBufferMode(MODE1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fb87 	bl	8000634 <update7SEGBufferMode>
  					normalModeFunction();
 8000f26:	f7ff f911 	bl	800014c <normalModeFunction>
  					setTimer2(100);
 8000f2a:	2064      	movs	r0, #100	; 0x64
 8000f2c:	f000 fb72 	bl	8001614 <setTimer2>
  					DISPLAYALL7SEG();
 8000f30:	f7ff fb8c 	bl	800064c <DISPLAYALL7SEG>
  					setTimer4(20);
 8000f34:	2014      	movs	r0, #20
 8000f36:	f000 fb95 	bl	8001664 <setTimer4>
  					break;
 8000f3a:	e070      	b.n	800101e <main+0x1a6>
  				case MODE1:
  					modeStatus = MODE2;
 8000f3c:	4b79      	ldr	r3, [pc, #484]	; (8001124 <main+0x2ac>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode = 1;
 8000f42:	4b79      	ldr	r3, [pc, #484]	; (8001128 <main+0x2b0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
  					offAllSingLEDs();
 8000f48:	f7ff fbaa 	bl	80006a0 <offAllSingLEDs>
  					blinkingRED();
 8000f4c:	f7ff fb90 	bl	8000670 <blinkingRED>
  					setTimer3(50);
 8000f50:	2032      	movs	r0, #50	; 0x32
 8000f52:	f000 fb73 	bl	800163c <setTimer3>
  					update7SEGBufferTraffic1(durationLedRed);
 8000f56:	4b77      	ldr	r3, [pc, #476]	; (8001134 <main+0x2bc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fb52 	bl	8000604 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(durationLedRed);
 8000f60:	4b74      	ldr	r3, [pc, #464]	; (8001134 <main+0x2bc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fb59 	bl	800061c <update7SEGBufferTraffic2>
  					update7SEGBufferMode(MODE2);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f7ff fb62 	bl	8000634 <update7SEGBufferMode>
  					break;
 8000f70:	e055      	b.n	800101e <main+0x1a6>
  				case MODE2:
  					modeStatus = MODE3;
 8000f72:	4b6c      	ldr	r3, [pc, #432]	; (8001124 <main+0x2ac>)
 8000f74:	2203      	movs	r2, #3
 8000f76:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode = 1;
 8000f78:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <main+0x2b0>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
  					offAllSingLEDs();
 8000f7e:	f7ff fb8f 	bl	80006a0 <offAllSingLEDs>
  					blinkingYELLOW();
 8000f82:	f7ff fb69 	bl	8000658 <blinkingYELLOW>
  					setTimer3(50);
 8000f86:	2032      	movs	r0, #50	; 0x32
 8000f88:	f000 fb58 	bl	800163c <setTimer3>
  					update7SEGBufferTraffic1(durationLedYellow);
 8000f8c:	4b6b      	ldr	r3, [pc, #428]	; (800113c <main+0x2c4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fb37 	bl	8000604 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(durationLedYellow);
 8000f96:	4b69      	ldr	r3, [pc, #420]	; (800113c <main+0x2c4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fb3e 	bl	800061c <update7SEGBufferTraffic2>
  					update7SEGBufferMode(MODE3);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f7ff fb47 	bl	8000634 <update7SEGBufferMode>
  					break;
 8000fa6:	e03a      	b.n	800101e <main+0x1a6>
  				case MODE3:
  					modeStatus = MODE4;
 8000fa8:	4b5e      	ldr	r3, [pc, #376]	; (8001124 <main+0x2ac>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode = 1;
 8000fae:	4b5e      	ldr	r3, [pc, #376]	; (8001128 <main+0x2b0>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
  					offAllSingLEDs();
 8000fb4:	f7ff fb74 	bl	80006a0 <offAllSingLEDs>
  					blinkingGREEN();
 8000fb8:	f7ff fb66 	bl	8000688 <blinkingGREEN>
  					setTimer3(50);
 8000fbc:	2032      	movs	r0, #50	; 0x32
 8000fbe:	f000 fb3d 	bl	800163c <setTimer3>
  					update7SEGBufferTraffic1(durationLedGreen);
 8000fc2:	4b5a      	ldr	r3, [pc, #360]	; (800112c <main+0x2b4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fb1c 	bl	8000604 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(durationLedGreen);
 8000fcc:	4b57      	ldr	r3, [pc, #348]	; (800112c <main+0x2b4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fb23 	bl	800061c <update7SEGBufferTraffic2>
  					update7SEGBufferMode(MODE4);
 8000fd6:	2004      	movs	r0, #4
 8000fd8:	f7ff fb2c 	bl	8000634 <update7SEGBufferMode>
  					break;
 8000fdc:	e01f      	b.n	800101e <main+0x1a6>
  				case MODE4:
  					modeStatus = MODE1;
 8000fde:	4b51      	ldr	r3, [pc, #324]	; (8001124 <main+0x2ac>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]
  					flagAdvancedMode = 0;
 8000fe4:	4b50      	ldr	r3, [pc, #320]	; (8001128 <main+0x2b0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
  					tempDurationLedGreen = durationLedGreen;
 8000fea:	4b50      	ldr	r3, [pc, #320]	; (800112c <main+0x2b4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a50      	ldr	r2, [pc, #320]	; (8001130 <main+0x2b8>)
 8000ff0:	6013      	str	r3, [r2, #0]
  					tempDurationLedRed = durationLedRed;
 8000ff2:	4b50      	ldr	r3, [pc, #320]	; (8001134 <main+0x2bc>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a50      	ldr	r2, [pc, #320]	; (8001138 <main+0x2c0>)
 8000ff8:	6013      	str	r3, [r2, #0]
  					tempDurationLedYellow = durationLedYellow;
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <main+0x2c4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a50      	ldr	r2, [pc, #320]	; (8001140 <main+0x2c8>)
 8001000:	6013      	str	r3, [r2, #0]
  					offAllSingLEDs();
 8001002:	f7ff fb4d 	bl	80006a0 <offAllSingLEDs>
  					update7SEGBufferMode(MODE1);
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fb14 	bl	8000634 <update7SEGBufferMode>
  					normalModeFunction();
 800100c:	f7ff f89e 	bl	800014c <normalModeFunction>
  					setTimer2(100);
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f000 faff 	bl	8001614 <setTimer2>
  					break;
 8001016:	e002      	b.n	800101e <main+0x1a6>
  				default:
  					break;
  				}
  			}
 8001018:	bf00      	nop
 800101a:	e000      	b.n	800101e <main+0x1a6>
  					break;
 800101c:	bf00      	nop
  			if (flagButton[1] == PRESSED_STATE)
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <main+0x2a8>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d152      	bne.n	80010cc <main+0x254>
  			{
  				flagButton[1] = NORMAL_STATE;
 8001026:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <main+0x2a8>)
 8001028:	2201      	movs	r2, #1
 800102a:	605a      	str	r2, [r3, #4]
  				switch (modeStatus)
 800102c:	4b3d      	ldr	r3, [pc, #244]	; (8001124 <main+0x2ac>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b04      	cmp	r3, #4
 8001032:	d034      	beq.n	800109e <main+0x226>
 8001034:	2b04      	cmp	r3, #4
 8001036:	dc4b      	bgt.n	80010d0 <main+0x258>
 8001038:	2b02      	cmp	r3, #2
 800103a:	d002      	beq.n	8001042 <main+0x1ca>
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <main+0x1f8>
  					}
  					update7SEGBufferTraffic1(tempDurationLedGreen);
  					update7SEGBufferTraffic2(tempDurationLedGreen);
  					break;
  				default:
  					break;
 8001040:	e046      	b.n	80010d0 <main+0x258>
  					tempDurationLedRed++;
 8001042:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <main+0x2c0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	3301      	adds	r3, #1
 8001048:	4a3b      	ldr	r2, [pc, #236]	; (8001138 <main+0x2c0>)
 800104a:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedRed > 99)
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <main+0x2c0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b63      	cmp	r3, #99	; 0x63
 8001052:	dd02      	ble.n	800105a <main+0x1e2>
  						tempDurationLedRed = 0;
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <main+0x2c0>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
  					update7SEGBufferTraffic1(tempDurationLedRed);
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <main+0x2c0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fad0 	bl	8000604 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(tempDurationLedRed);
 8001064:	4b34      	ldr	r3, [pc, #208]	; (8001138 <main+0x2c0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fad7 	bl	800061c <update7SEGBufferTraffic2>
  					break;
 800106e:	e030      	b.n	80010d2 <main+0x25a>
  					tempDurationLedYellow++;
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <main+0x2c8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a32      	ldr	r2, [pc, #200]	; (8001140 <main+0x2c8>)
 8001078:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedYellow > 99)
 800107a:	4b31      	ldr	r3, [pc, #196]	; (8001140 <main+0x2c8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2b63      	cmp	r3, #99	; 0x63
 8001080:	dd02      	ble.n	8001088 <main+0x210>
  						tempDurationLedYellow = 0;
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <main+0x2c8>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
  					update7SEGBufferTraffic1(tempDurationLedYellow);
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <main+0x2c8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fab9 	bl	8000604 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(tempDurationLedYellow);
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <main+0x2c8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fac0 	bl	800061c <update7SEGBufferTraffic2>
  					break;
 800109c:	e019      	b.n	80010d2 <main+0x25a>
  					tempDurationLedGreen++;
 800109e:	4b24      	ldr	r3, [pc, #144]	; (8001130 <main+0x2b8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <main+0x2b8>)
 80010a6:	6013      	str	r3, [r2, #0]
  					if (tempDurationLedGreen > 99)
 80010a8:	4b21      	ldr	r3, [pc, #132]	; (8001130 <main+0x2b8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b63      	cmp	r3, #99	; 0x63
 80010ae:	dd02      	ble.n	80010b6 <main+0x23e>
  						tempDurationLedGreen = 0;
 80010b0:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <main+0x2b8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
  					update7SEGBufferTraffic1(tempDurationLedGreen);
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <main+0x2b8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff faa2 	bl	8000604 <update7SEGBufferTraffic1>
  					update7SEGBufferTraffic2(tempDurationLedGreen);
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <main+0x2b8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff faa9 	bl	800061c <update7SEGBufferTraffic2>
  					break;
 80010ca:	e002      	b.n	80010d2 <main+0x25a>
  				}
  			}
 80010cc:	bf00      	nop
 80010ce:	e000      	b.n	80010d2 <main+0x25a>
  					break;
 80010d0:	bf00      	nop
  			if (flagButton[2] == PRESSED_STATE)
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <main+0x2a8>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d156      	bne.n	8001188 <main+0x310>
  			{
  				flagButton[2] = NORMAL_STATE;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <main+0x2a8>)
 80010dc:	2201      	movs	r2, #1
 80010de:	609a      	str	r2, [r3, #8]
  				if (tempDurationLedRed != tempDurationLedYellow + tempDurationLedGreen)
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <main+0x2c8>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <main+0x2b8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	441a      	add	r2, r3
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <main+0x2c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d028      	beq.n	8001144 <main+0x2cc>
  				{
  					switch (modeStatus)
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <main+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d145      	bne.n	8001186 <main+0x30e>
  					{
  					case MODE4:
  						update7SEGBufferTraffic1(88);
 80010fa:	2058      	movs	r0, #88	; 0x58
 80010fc:	f7ff fa82 	bl	8000604 <update7SEGBufferTraffic1>
  						update7SEGBufferTraffic2(88);
 8001100:	2058      	movs	r0, #88	; 0x58
 8001102:	f7ff fa8b 	bl	800061c <update7SEGBufferTraffic2>
  						update7SEGBufferMode(8);
 8001106:	2008      	movs	r0, #8
 8001108:	f7ff fa94 	bl	8000634 <update7SEGBufferMode>
  						onAllSingLEDs();
 800110c:	f7ff fad4 	bl	80006b8 <onAllSingLEDs>
  						modeStatus = INITMODE;
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <main+0x2ac>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
  						break;
 8001116:	e037      	b.n	8001188 <main+0x310>
 8001118:	200000e8 	.word	0x200000e8
 800111c:	20000140 	.word	0x20000140
 8001120:	2000005c 	.word	0x2000005c
 8001124:	20000094 	.word	0x20000094
 8001128:	200000cc 	.word	0x200000cc
 800112c:	20000010 	.word	0x20000010
 8001130:	20000004 	.word	0x20000004
 8001134:	2000000c 	.word	0x2000000c
 8001138:	20000000 	.word	0x20000000
 800113c:	20000014 	.word	0x20000014
 8001140:	20000008 	.word	0x20000008
  						break;
  					}
  				}
  				else
  				{
  					durationLedGreen = tempDurationLedGreen;
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <main+0x384>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a2d      	ldr	r2, [pc, #180]	; (8001200 <main+0x388>)
 800114a:	6013      	str	r3, [r2, #0]
  					durationLedRed = tempDurationLedRed;
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <main+0x38c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <main+0x390>)
 8001152:	6013      	str	r3, [r2, #0]
  					durationLedYellow = tempDurationLedYellow;
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <main+0x394>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <main+0x398>)
 800115a:	6013      	str	r3, [r2, #0]
  					statusTraffic1 = INIT1;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <main+0x39c>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
  					statusTraffic2 = INIT2;
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <main+0x3a0>)
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
  					if (modeStatus == 1 || modeStatus == 0)
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <main+0x3a4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d003      	beq.n	8001178 <main+0x300>
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <main+0x3a4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d107      	bne.n	8001188 <main+0x310>
  					{
  						normalModeFunction();
 8001178:	f7fe ffe8 	bl	800014c <normalModeFunction>
  						setTimer2(1000);
 800117c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001180:	f000 fa48 	bl	8001614 <setTimer2>
 8001184:	e000      	b.n	8001188 <main+0x310>
  						break;
 8001186:	bf00      	nop
  					}
  				}
  			}
  		}
  		if (flag2 == 1) // flag normal led
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <main+0x3a8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d108      	bne.n	80011a2 <main+0x32a>
  		{
  			setTimer2(100);
 8001190:	2064      	movs	r0, #100	; 0x64
 8001192:	f000 fa3f 	bl	8001614 <setTimer2>
  			if (flagAdvancedMode == 0)
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <main+0x3ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <main+0x32a>
  			{
  				normalModeFunction();
 800119e:	f7fe ffd5 	bl	800014c <normalModeFunction>
  			}
  		}
  		if (flag3 == 1) // flag for model modify
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <main+0x3b0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d11a      	bne.n	80011e0 <main+0x368>
  		{
  			setTimer3(50);
 80011aa:	2032      	movs	r0, #50	; 0x32
 80011ac:	f000 fa46 	bl	800163c <setTimer3>
  			if (flagAdvancedMode == 1)
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <main+0x3ac>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d113      	bne.n	80011e0 <main+0x368>
  			{
  				switch (modeStatus)
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <main+0x3a4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b04      	cmp	r3, #4
 80011be:	d00c      	beq.n	80011da <main+0x362>
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	dc0f      	bgt.n	80011e4 <main+0x36c>
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d002      	beq.n	80011ce <main+0x356>
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d003      	beq.n	80011d4 <main+0x35c>
  					break;
  				case MODE4:
  					blinkingGREEN();
  					break;
  				default:
  					break;
 80011cc:	e00a      	b.n	80011e4 <main+0x36c>
  					blinkingRED();
 80011ce:	f7ff fa4f 	bl	8000670 <blinkingRED>
  					break;
 80011d2:	e008      	b.n	80011e6 <main+0x36e>
  					blinkingYELLOW();
 80011d4:	f7ff fa40 	bl	8000658 <blinkingYELLOW>
  					break;
 80011d8:	e005      	b.n	80011e6 <main+0x36e>
  					blinkingGREEN();
 80011da:	f7ff fa55 	bl	8000688 <blinkingGREEN>
  					break;
 80011de:	e002      	b.n	80011e6 <main+0x36e>
  				}
  			}
 80011e0:	bf00      	nop
 80011e2:	e000      	b.n	80011e6 <main+0x36e>
  					break;
 80011e4:	bf00      	nop
  		}
  		if (flag4 == 1)
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <main+0x3b4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	f47f ae60 	bne.w	8000eb0 <main+0x38>
  		{
  			DISPLAYALL7SEG();
 80011f0:	f7ff fa2c 	bl	800064c <DISPLAYALL7SEG>
  			setTimer4(20);
 80011f4:	2014      	movs	r0, #20
 80011f6:	f000 fa35 	bl	8001664 <setTimer4>
  		if (flag1 == 1) // flag for button
 80011fa:	e659      	b.n	8000eb0 <main+0x38>
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000010 	.word	0x20000010
 8001204:	20000000 	.word	0x20000000
 8001208:	2000000c 	.word	0x2000000c
 800120c:	20000008 	.word	0x20000008
 8001210:	20000014 	.word	0x20000014
 8001214:	200000c0 	.word	0x200000c0
 8001218:	200000c4 	.word	0x200000c4
 800121c:	20000094 	.word	0x20000094
 8001220:	20000138 	.word	0x20000138
 8001224:	200000cc 	.word	0x200000cc
 8001228:	20000148 	.word	0x20000148
 800122c:	2000013c 	.word	0x2000013c

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b090      	sub	sp, #64	; 0x40
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	2228      	movs	r2, #40	; 0x28
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fd64 	bl	8002d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001256:	2301      	movs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800125a:	2310      	movs	r3, #16
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fd68 	bl	8001d3c <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001272:	f000 f8d1 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ffd4 	bl	800223c <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800129a:	f000 f8bd 	bl	8001418 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3740      	adds	r7, #64	; 0x40
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	463b      	mov	r3, r7
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_TIM2_Init+0x94>)
 80012c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <MX_TIM2_Init+0x94>)
 80012ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_TIM2_Init+0x94>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <MX_TIM2_Init+0x94>)
 80012dc:	2209      	movs	r2, #9
 80012de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_TIM2_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_TIM2_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <MX_TIM2_Init+0x94>)
 80012ee:	f001 f901 	bl	80024f4 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012f8:	f000 f88e 	bl	8001418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_TIM2_Init+0x94>)
 800130a:	f001 fa97 	bl	800283c <HAL_TIM_ConfigClockSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001314:	f000 f880 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_TIM2_Init+0x94>)
 8001326:	f001 fc63 	bl	8002bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001330:	f000 f872 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000e8 	.word	0x200000e8

08001340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	4a27      	ldr	r2, [pc, #156]	; (80013f8 <MX_GPIO_Init+0xb8>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6193      	str	r3, [r2, #24]
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <MX_GPIO_Init+0xb8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a21      	ldr	r2, [pc, #132]	; (80013f8 <MX_GPIO_Init+0xb8>)
 8001372:	f043 0308 	orr.w	r3, r3, #8
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <MX_GPIO_Init+0xb8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0308 	and.w	r3, r3, #8
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8001384:	2200      	movs	r2, #0
 8001386:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800138a:	481c      	ldr	r0, [pc, #112]	; (80013fc <MX_GPIO_Init+0xbc>)
 800138c:	f000 fca5 	bl	8001cda <HAL_GPIO_WritePin>
                          |EN3_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin
                          |LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|EN4_Pin
 8001390:	2200      	movs	r2, #0
 8001392:	f240 417f 	movw	r1, #1151	; 0x47f
 8001396:	481a      	ldr	r0, [pc, #104]	; (8001400 <MX_GPIO_Init+0xc0>)
 8001398:	f000 fc9f 	bl	8001cda <HAL_GPIO_WritePin>
                          |D_Pin|E_Pin|F_Pin|G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800139c:	231c      	movs	r3, #28
 800139e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <MX_GPIO_Init+0xbc>)
 80013b0:	f000 fb02 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin
                           LED_RED_2_Pin LED_YELLOW_2_Pin LED_GREEN_2_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80013b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80013b8:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin
                          |LED_RED_2_Pin|LED_YELLOW_2_Pin|LED_GREEN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2302      	movs	r3, #2
 80013c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	4619      	mov	r1, r3
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <MX_GPIO_Init+0xbc>)
 80013ce:	f000 faf3 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin EN4_Pin
                           D_Pin E_Pin F_Pin G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|EN4_Pin
 80013d2:	f240 437f 	movw	r3, #1151	; 0x47f
 80013d6:	60bb      	str	r3, [r7, #8]
                          |D_Pin|E_Pin|F_Pin|G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2302      	movs	r3, #2
 80013e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e4:	f107 0308 	add.w	r3, r7, #8
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_GPIO_Init+0xc0>)
 80013ec:	f000 fae4 	bl	80019b8 <HAL_GPIO_Init>

}
 80013f0:	bf00      	nop
 80013f2:	3718      	adds	r7, #24
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010800 	.word	0x40010800
 8001400:	40010c00 	.word	0x40010c00

08001404 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	runTimer();
 800140c:	f000 f898 	bl	8001540 <runTimer>

}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_MspInit+0x5c>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_MspInit+0x5c>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6193      	str	r3, [r2, #24]
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_MspInit+0x5c>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x5c>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_MspInit+0x5c>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x5c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <HAL_MspInit+0x60>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_MspInit+0x60>)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d113      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	201c      	movs	r0, #28
 80014b8:	f000 fa47 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f000 fa60 	bl	8001982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f925 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM2_IRQHandler+0x10>)
 8001526:	f001 f881 	bl	800262c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200000e8 	.word	0x200000e8

08001534 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <runTimer>:

int counter4;
int flag4;

void runTimer()
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	if (counter1 > 0)
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <runTimer+0x8c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	dd0b      	ble.n	8001564 <runTimer+0x24>
	{
		counter1--;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <runTimer+0x8c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <runTimer+0x8c>)
 8001554:	6013      	str	r3, [r2, #0]
		if (counter1 <= 0)
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <runTimer+0x8c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	dc02      	bgt.n	8001564 <runTimer+0x24>
		{
			flag1 = 1;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <runTimer+0x90>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter2 > 0)
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <runTimer+0x94>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	dd0b      	ble.n	8001584 <runTimer+0x44>
	{
		counter2--;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <runTimer+0x94>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <runTimer+0x94>)
 8001574:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <runTimer+0x94>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dc02      	bgt.n	8001584 <runTimer+0x44>
		{
			flag2 = 1;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <runTimer+0x98>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 > 0)
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <runTimer+0x9c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd0b      	ble.n	80015a4 <runTimer+0x64>
	{
		counter3--;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <runTimer+0x9c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <runTimer+0x9c>)
 8001594:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <runTimer+0x9c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dc02      	bgt.n	80015a4 <runTimer+0x64>
		{
			flag3 = 1;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <runTimer+0xa0>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter4 > 0)
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <runTimer+0xa4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dd0b      	ble.n	80015c4 <runTimer+0x84>
	{
		counter4--;
 80015ac:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <runTimer+0xa4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a0c      	ldr	r2, [pc, #48]	; (80015e4 <runTimer+0xa4>)
 80015b4:	6013      	str	r3, [r2, #0]
		if (counter4 <= 0)
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <runTimer+0xa4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dc02      	bgt.n	80015c4 <runTimer+0x84>
		{
			flag4 = 1;
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <runTimer+0xa8>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000134 	.word	0x20000134
 80015d0:	20000140 	.word	0x20000140
 80015d4:	2000014c 	.word	0x2000014c
 80015d8:	20000138 	.word	0x20000138
 80015dc:	20000130 	.word	0x20000130
 80015e0:	20000148 	.word	0x20000148
 80015e4:	20000144 	.word	0x20000144
 80015e8:	2000013c 	.word	0x2000013c

080015ec <setTimer1>:

void setTimer1(int duration)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	counter1 = duration;
 80015f4:	4a05      	ldr	r2, [pc, #20]	; (800160c <setTimer1+0x20>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
	flag1 = 0;
 80015fa:	4b05      	ldr	r3, [pc, #20]	; (8001610 <setTimer1+0x24>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000134 	.word	0x20000134
 8001610:	20000140 	.word	0x20000140

08001614 <setTimer2>:

void setTimer2(int duration)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	counter2 = duration;
 800161c:	4a05      	ldr	r2, [pc, #20]	; (8001634 <setTimer2+0x20>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
	flag2 = 0;
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <setTimer2+0x24>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000014c 	.word	0x2000014c
 8001638:	20000138 	.word	0x20000138

0800163c <setTimer3>:

void setTimer3(int duration)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	counter3 = duration;
 8001644:	4a05      	ldr	r2, [pc, #20]	; (800165c <setTimer3+0x20>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6013      	str	r3, [r2, #0]
	flag3 = 0;
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <setTimer3+0x24>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000130 	.word	0x20000130
 8001660:	20000148 	.word	0x20000148

08001664 <setTimer4>:

void setTimer4(int duration)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	counter4 = duration;
 800166c:	4a05      	ldr	r2, [pc, #20]	; (8001684 <setTimer4+0x20>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
	flag4 = 0;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <setTimer4+0x24>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000144 	.word	0x20000144
 8001688:	2000013c 	.word	0x2000013c

0800168c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800168c:	f7ff ff52 	bl	8001534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001692:	490c      	ldr	r1, [pc, #48]	; (80016c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016a8:	4c09      	ldr	r4, [pc, #36]	; (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f001 fb05 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ba:	f7ff fbdd 	bl	8000e78 <main>
  bx lr
 80016be:	4770      	bx	lr
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016c8:	08002d60 	.word	0x08002d60
  ldr r2, =_sbss
 80016cc:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80016d0:	20000154 	.word	0x20000154

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x28>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x28>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f923 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fe96 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f93b 	bl	800199e <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f903 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000098 	.word	0x20000098
 800175c:	200000a0 	.word	0x200000a0
 8001760:	2000009c 	.word	0x2000009c

08001764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_IncTick+0x1c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_IncTick+0x20>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <HAL_IncTick+0x20>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	200000a0 	.word	0x200000a0
 8001784:	20000150 	.word	0x20000150

08001788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <HAL_GetTick+0x10>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000150 	.word	0x20000150

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4906      	ldr	r1, [pc, #24]	; (8001834 <__NVIC_EnableIRQ+0x34>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff90 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	; (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff2d 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff42 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff90 	bl	800188c <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5f 	bl	8001838 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff35 	bl	8001800 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b08b      	sub	sp, #44	; 0x2c
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ca:	e148      	b.n	8001c5e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019cc:	2201      	movs	r2, #1
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8137 	bne.w	8001c58 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4aa3      	ldr	r2, [pc, #652]	; (8001c7c <HAL_GPIO_Init+0x2c4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d05e      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 80019f4:	4aa1      	ldr	r2, [pc, #644]	; (8001c7c <HAL_GPIO_Init+0x2c4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d875      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 80019fa:	4aa1      	ldr	r2, [pc, #644]	; (8001c80 <HAL_GPIO_Init+0x2c8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d058      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a00:	4a9f      	ldr	r2, [pc, #636]	; (8001c80 <HAL_GPIO_Init+0x2c8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d86f      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a06:	4a9f      	ldr	r2, [pc, #636]	; (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d052      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a0c:	4a9d      	ldr	r2, [pc, #628]	; (8001c84 <HAL_GPIO_Init+0x2cc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d869      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a12:	4a9d      	ldr	r2, [pc, #628]	; (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d04c      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a18:	4a9b      	ldr	r2, [pc, #620]	; (8001c88 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d863      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a1e:	4a9b      	ldr	r2, [pc, #620]	; (8001c8c <HAL_GPIO_Init+0x2d4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d046      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
 8001a24:	4a99      	ldr	r2, [pc, #612]	; (8001c8c <HAL_GPIO_Init+0x2d4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d85d      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a2a:	2b12      	cmp	r3, #18
 8001a2c:	d82a      	bhi.n	8001a84 <HAL_GPIO_Init+0xcc>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d859      	bhi.n	8001ae6 <HAL_GPIO_Init+0x12e>
 8001a32:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <HAL_GPIO_Init+0x80>)
 8001a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a38:	08001ab3 	.word	0x08001ab3
 8001a3c:	08001a8d 	.word	0x08001a8d
 8001a40:	08001a9f 	.word	0x08001a9f
 8001a44:	08001ae1 	.word	0x08001ae1
 8001a48:	08001ae7 	.word	0x08001ae7
 8001a4c:	08001ae7 	.word	0x08001ae7
 8001a50:	08001ae7 	.word	0x08001ae7
 8001a54:	08001ae7 	.word	0x08001ae7
 8001a58:	08001ae7 	.word	0x08001ae7
 8001a5c:	08001ae7 	.word	0x08001ae7
 8001a60:	08001ae7 	.word	0x08001ae7
 8001a64:	08001ae7 	.word	0x08001ae7
 8001a68:	08001ae7 	.word	0x08001ae7
 8001a6c:	08001ae7 	.word	0x08001ae7
 8001a70:	08001ae7 	.word	0x08001ae7
 8001a74:	08001ae7 	.word	0x08001ae7
 8001a78:	08001ae7 	.word	0x08001ae7
 8001a7c:	08001a95 	.word	0x08001a95
 8001a80:	08001aa9 	.word	0x08001aa9
 8001a84:	4a82      	ldr	r2, [pc, #520]	; (8001c90 <HAL_GPIO_Init+0x2d8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8a:	e02c      	b.n	8001ae6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	623b      	str	r3, [r7, #32]
          break;
 8001a92:	e029      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	623b      	str	r3, [r7, #32]
          break;
 8001a9c:	e024      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e01f      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	330c      	adds	r3, #12
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e01a      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001aba:	2304      	movs	r3, #4
 8001abc:	623b      	str	r3, [r7, #32]
          break;
 8001abe:	e013      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ac8:	2308      	movs	r3, #8
 8001aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	611a      	str	r2, [r3, #16]
          break;
 8001ad2:	e009      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69fa      	ldr	r2, [r7, #28]
 8001adc:	615a      	str	r2, [r3, #20]
          break;
 8001ade:	e003      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
          break;
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x130>
          break;
 8001ae6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2bff      	cmp	r3, #255	; 0xff
 8001aec:	d801      	bhi.n	8001af2 <HAL_GPIO_Init+0x13a>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_Init+0x13e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3304      	adds	r3, #4
 8001af6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2bff      	cmp	r3, #255	; 0xff
 8001afc:	d802      	bhi.n	8001b04 <HAL_GPIO_Init+0x14c>
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0x152>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	3b08      	subs	r3, #8
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	210f      	movs	r1, #15
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	6a39      	ldr	r1, [r7, #32]
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	fa01 f303 	lsl.w	r3, r1, r3
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8090 	beq.w	8001c58 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b38:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_GPIO_Init+0x2dc>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_GPIO_Init+0x2dc>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_GPIO_Init+0x2dc>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b50:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a49      	ldr	r2, [pc, #292]	; (8001c9c <HAL_GPIO_Init+0x2e4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00d      	beq.n	8001b98 <HAL_GPIO_Init+0x1e0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a48      	ldr	r2, [pc, #288]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d007      	beq.n	8001b94 <HAL_GPIO_Init+0x1dc>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a47      	ldr	r2, [pc, #284]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d101      	bne.n	8001b90 <HAL_GPIO_Init+0x1d8>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e004      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b90:	2303      	movs	r3, #3
 8001b92:	e002      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <HAL_GPIO_Init+0x1e2>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	f002 0203 	and.w	r2, r2, #3
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	4093      	lsls	r3, r2
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001baa:	493b      	ldr	r1, [pc, #236]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc4:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd2:	4b35      	ldr	r3, [pc, #212]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	4933      	ldr	r1, [pc, #204]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bec:	4b2e      	ldr	r3, [pc, #184]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	492d      	ldr	r1, [pc, #180]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60cb      	str	r3, [r1, #12]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4929      	ldr	r1, [pc, #164]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4923      	ldr	r1, [pc, #140]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
 8001c20:	e006      	b.n	8001c30 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c22:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	491f      	ldr	r1, [pc, #124]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d006      	beq.n	8001c4a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4919      	ldr	r1, [pc, #100]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4915      	ldr	r1, [pc, #84]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f47f aeaf 	bne.w	80019cc <HAL_GPIO_Init+0x14>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	bf00      	nop
 8001c72:	372c      	adds	r7, #44	; 0x2c
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	10320000 	.word	0x10320000
 8001c80:	10310000 	.word	0x10310000
 8001c84:	10220000 	.word	0x10220000
 8001c88:	10210000 	.word	0x10210000
 8001c8c:	10120000 	.word	0x10120000
 8001c90:	10110000 	.word	0x10110000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40010800 	.word	0x40010800
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40010400 	.word	0x40010400

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	807b      	strh	r3, [r7, #2]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cea:	787b      	ldrb	r3, [r7, #1]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf6:	e003      	b.n	8001d00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	041a      	lsls	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	460b      	mov	r3, r1
 8001d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d1c:	887a      	ldrh	r2, [r7, #2]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4013      	ands	r3, r2
 8001d22:	041a      	lsls	r2, r3, #16
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	611a      	str	r2, [r3, #16]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e26c      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8087 	beq.w	8001e6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d5c:	4b92      	ldr	r3, [pc, #584]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d00c      	beq.n	8001d82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d68:	4b8f      	ldr	r3, [pc, #572]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d112      	bne.n	8001d9a <HAL_RCC_OscConfig+0x5e>
 8001d74:	4b8c      	ldr	r3, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d10b      	bne.n	8001d9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	4b89      	ldr	r3, [pc, #548]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d06c      	beq.n	8001e68 <HAL_RCC_OscConfig+0x12c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d168      	bne.n	8001e68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e246      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x76>
 8001da4:	4b80      	ldr	r3, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a7f      	ldr	r2, [pc, #508]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e02e      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x98>
 8001dba:	4b7b      	ldr	r3, [pc, #492]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7a      	ldr	r2, [pc, #488]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a77      	ldr	r2, [pc, #476]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0xbc>
 8001dde:	4b72      	ldr	r3, [pc, #456]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a71      	ldr	r2, [pc, #452]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b6f      	ldr	r3, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a6e      	ldr	r2, [pc, #440]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xd4>
 8001df8:	4b6b      	ldr	r3, [pc, #428]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a6a      	ldr	r2, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b68      	ldr	r3, [pc, #416]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a67      	ldr	r2, [pc, #412]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff fcb6 	bl	8001788 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fcb2 	bl	8001788 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1fa      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b5d      	ldr	r3, [pc, #372]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xe4>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fca2 	bl	8001788 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fc9e 	bl	8001788 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1e6      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x10c>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d063      	beq.n	8001f3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e76:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x18c>
 8001e8e:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d116      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x176>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1ba      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4939      	ldr	r1, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec6:	e03a      	b.n	8001f3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d020      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_RCC_OscConfig+0x270>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fc57 	bl	8001788 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ede:	f7ff fc53 	bl	8001788 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e19b      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0f0      	beq.n	8001ede <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4927      	ldr	r1, [pc, #156]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
 8001f10:	e015      	b.n	8001f3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_OscConfig+0x270>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fc36 	bl	8001788 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fc32 	bl	8001788 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e17a      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d03a      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d019      	beq.n	8001f86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_RCC_OscConfig+0x274>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f58:	f7ff fc16 	bl	8001788 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fc12 	bl	8001788 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e15a      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f000 fa9a 	bl	80024b8 <RCC_Delay>
 8001f84:	e01c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_OscConfig+0x274>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff fbfc 	bl	8001788 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff fbf8 	bl	8001788 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e140      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	42420000 	.word	0x42420000
 8001fb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	4b9e      	ldr	r3, [pc, #632]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e9      	bne.n	8001f94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80a6 	beq.w	800211a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b97      	ldr	r3, [pc, #604]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b94      	ldr	r3, [pc, #592]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a93      	ldr	r2, [pc, #588]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b91      	ldr	r3, [pc, #580]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b8e      	ldr	r3, [pc, #568]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b8b      	ldr	r3, [pc, #556]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a8a      	ldr	r2, [pc, #552]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7ff fbb9 	bl	8001788 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7ff fbb5 	bl	8001788 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0fd      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b81      	ldr	r3, [pc, #516]	; (8002234 <HAL_RCC_OscConfig+0x4f8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x312>
 8002040:	4b7b      	ldr	r3, [pc, #492]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a7a      	ldr	r2, [pc, #488]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	e02d      	b.n	80020aa <HAL_RCC_OscConfig+0x36e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x334>
 8002056:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a75      	ldr	r2, [pc, #468]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	4b73      	ldr	r3, [pc, #460]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a72      	ldr	r2, [pc, #456]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	e01c      	b.n	80020aa <HAL_RCC_OscConfig+0x36e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b05      	cmp	r3, #5
 8002076:	d10c      	bne.n	8002092 <HAL_RCC_OscConfig+0x356>
 8002078:	4b6d      	ldr	r3, [pc, #436]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a6c      	ldr	r2, [pc, #432]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a69      	ldr	r2, [pc, #420]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	e00b      	b.n	80020aa <HAL_RCC_OscConfig+0x36e>
 8002092:	4b67      	ldr	r3, [pc, #412]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a66      	ldr	r2, [pc, #408]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f023 0301 	bic.w	r3, r3, #1
 800209c:	6213      	str	r3, [r2, #32]
 800209e:	4b64      	ldr	r3, [pc, #400]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a63      	ldr	r2, [pc, #396]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f023 0304 	bic.w	r3, r3, #4
 80020a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d015      	beq.n	80020de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b2:	f7ff fb69 	bl	8001788 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ba:	f7ff fb65 	bl	8001788 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0ab      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ee      	beq.n	80020ba <HAL_RCC_OscConfig+0x37e>
 80020dc:	e014      	b.n	8002108 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020de:	f7ff fb53 	bl	8001788 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff fb4f 	bl	8001788 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e095      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fc:	4b4c      	ldr	r3, [pc, #304]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d105      	bne.n	800211a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b48      	ldr	r3, [pc, #288]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4a47      	ldr	r2, [pc, #284]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8081 	beq.w	8002226 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002124:	4b42      	ldr	r3, [pc, #264]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b08      	cmp	r3, #8
 800212e:	d061      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d146      	bne.n	80021c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_RCC_OscConfig+0x4fc>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff fb23 	bl	8001788 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002146:	f7ff fb1f 	bl	8001788 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e067      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002158:	4b35      	ldr	r3, [pc, #212]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d108      	bne.n	8002180 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	492d      	ldr	r1, [pc, #180]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a19      	ldr	r1, [r3, #32]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	430b      	orrs	r3, r1
 8002192:	4927      	ldr	r1, [pc, #156]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x4fc>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff faf3 	bl	8001788 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff faef 	bl	8001788 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e037      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x46a>
 80021c4:	e02f      	b.n	8002226 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_RCC_OscConfig+0x4fc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fadc 	bl	8001788 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff fad8 	bl	8001788 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e020      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e6:	4b12      	ldr	r3, [pc, #72]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x498>
 80021f2:	e018      	b.n	8002226 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e013      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	429a      	cmp	r2, r3
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	40007000 	.word	0x40007000
 8002238:	42420060 	.word	0x42420060

0800223c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d0      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d910      	bls.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4965      	ldr	r1, [pc, #404]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b8      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	494d      	ldr	r1, [pc, #308]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d040      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07f      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e073      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06b      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4936      	ldr	r1, [pc, #216]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7ff fa2c 	bl	8001788 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff fa28 	bl	8001788 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e053      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d210      	bcs.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4922      	ldr	r1, [pc, #136]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e032      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4916      	ldr	r1, [pc, #88]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ca:	f000 f821 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	490a      	ldr	r1, [pc, #40]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <HAL_RCC_ClockConfig+0x1cc>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f98a 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000
 8002400:	40021000 	.word	0x40021000
 8002404:	08002d34 	.word	0x08002d34
 8002408:	20000098 	.word	0x20000098
 800240c:	2000009c 	.word	0x2000009c

08002410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d002      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x30>
 800243a:	2b08      	cmp	r3, #8
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x36>
 800243e:	e027      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002442:	613b      	str	r3, [r7, #16]
      break;
 8002444:	e027      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d010      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800245e:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0c5b      	lsrs	r3, r3, #17
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002472:	fb02 f203 	mul.w	r2, r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e004      	b.n	800248a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	613b      	str	r3, [r7, #16]
      break;
 800248e:	e002      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002496:	693b      	ldr	r3, [r7, #16]
}
 8002498:	4618      	mov	r0, r3
 800249a:	371c      	adds	r7, #28
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	007a1200 	.word	0x007a1200
 80024ac:	08002d44 	.word	0x08002d44
 80024b0:	08002d54 	.word	0x08002d54
 80024b4:	003d0900 	.word	0x003d0900

080024b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024c0:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <RCC_Delay+0x34>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <RCC_Delay+0x38>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0a5b      	lsrs	r3, r3, #9
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024d4:	bf00      	nop
  }
  while (Delay --);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1e5a      	subs	r2, r3, #1
 80024da:	60fa      	str	r2, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <RCC_Delay+0x1c>
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	20000098 	.word	0x20000098
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e041      	b.n	800258a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe ffb4 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f000 fa6e 	bl	8002a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e035      	b.n	8002618 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2202      	movs	r2, #2
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a16      	ldr	r2, [pc, #88]	; (8002624 <HAL_TIM_Base_Start_IT+0x90>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_TIM_Base_Start_IT+0x4e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d004      	beq.n	80025e2 <HAL_TIM_Base_Start_IT+0x4e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a12      	ldr	r2, [pc, #72]	; (8002628 <HAL_TIM_Base_Start_IT+0x94>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d111      	bne.n	8002606 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d010      	beq.n	8002616 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002604:	e007      	b.n	8002616 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40000400 	.word	0x40000400

0800262c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b02      	cmp	r3, #2
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b02      	cmp	r3, #2
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0202 	mvn.w	r2, #2
 8002658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f9b4 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f9a7 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f9b6 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0204 	mvn.w	r2, #4
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f98a 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f97d 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f98c 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0208 	mvn.w	r2, #8
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2204      	movs	r2, #4
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f960 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f953 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f962 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b10      	cmp	r3, #16
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b10      	cmp	r3, #16
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0210 	mvn.w	r2, #16
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2208      	movs	r2, #8
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f936 	bl	80029dc <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f929 	bl	80029ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f938 	bl	80029ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0201 	mvn.w	r2, #1
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe fe2a 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d10e      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d107      	bne.n	80027dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa6b 	bl	8002cb2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b40      	cmp	r3, #64	; 0x40
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8fc 	bl	8002a00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b20      	cmp	r3, #32
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b20      	cmp	r3, #32
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0220 	mvn.w	r2, #32
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa36 	bl	8002ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIM_ConfigClockSource+0x1c>
 8002854:	2302      	movs	r3, #2
 8002856:	e0b4      	b.n	80029c2 <HAL_TIM_ConfigClockSource+0x186>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002876:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d03e      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0xd4>
 8002892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002896:	f200 8087 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289e:	f000 8086 	beq.w	80029ae <HAL_TIM_ConfigClockSource+0x172>
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	d87f      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d01a      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xa6>
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d87b      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028b0:	2b60      	cmp	r3, #96	; 0x60
 80028b2:	d050      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x11a>
 80028b4:	2b60      	cmp	r3, #96	; 0x60
 80028b6:	d877      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028b8:	2b50      	cmp	r3, #80	; 0x50
 80028ba:	d03c      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0xfa>
 80028bc:	2b50      	cmp	r3, #80	; 0x50
 80028be:	d873      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d058      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x13a>
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d86f      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028c8:	2b30      	cmp	r3, #48	; 0x30
 80028ca:	d064      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028cc:	2b30      	cmp	r3, #48	; 0x30
 80028ce:	d86b      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d060      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d867      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05c      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d05a      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x15a>
 80028e0:	e062      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f000 f95e 	bl	8002bb2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002904:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	609a      	str	r2, [r3, #8]
      break;
 800290e:	e04f      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6899      	ldr	r1, [r3, #8]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f000 f947 	bl	8002bb2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002932:	609a      	str	r2, [r3, #8]
      break;
 8002934:	e03c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f8be 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2150      	movs	r1, #80	; 0x50
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f915 	bl	8002b7e <TIM_ITRx_SetConfig>
      break;
 8002954:	e02c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 f8dc 	bl	8002b20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2160      	movs	r1, #96	; 0x60
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f905 	bl	8002b7e <TIM_ITRx_SetConfig>
      break;
 8002974:	e01c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 f89e 	bl	8002ac4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2140      	movs	r1, #64	; 0x40
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f8f5 	bl	8002b7e <TIM_ITRx_SetConfig>
      break;
 8002994:	e00c      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f000 f8ec 	bl	8002b7e <TIM_ITRx_SetConfig>
      break;
 80029a6:	e003      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e000      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a25      	ldr	r2, [pc, #148]	; (8002abc <TIM_Base_SetConfig+0xa8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d007      	beq.n	8002a3c <TIM_Base_SetConfig+0x28>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a32:	d003      	beq.n	8002a3c <TIM_Base_SetConfig+0x28>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <TIM_Base_SetConfig+0xac>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d108      	bne.n	8002a4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <TIM_Base_SetConfig+0xa8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d007      	beq.n	8002a66 <TIM_Base_SetConfig+0x52>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5c:	d003      	beq.n	8002a66 <TIM_Base_SetConfig+0x52>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a17      	ldr	r2, [pc, #92]	; (8002ac0 <TIM_Base_SetConfig+0xac>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d108      	bne.n	8002a78 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a07      	ldr	r2, [pc, #28]	; (8002abc <TIM_Base_SetConfig+0xa8>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d103      	bne.n	8002aac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	615a      	str	r2, [r3, #20]
}
 8002ab2:	bf00      	nop
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40000400 	.word	0x40000400

08002ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0201 	bic.w	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f023 030a 	bic.w	r3, r3, #10
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 0210 	bic.w	r2, r3, #16
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	031b      	lsls	r3, r3, #12
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	621a      	str	r2, [r3, #32]
}
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f043 0307 	orr.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	609a      	str	r2, [r3, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
 8002bbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	021a      	lsls	r2, r3, #8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	609a      	str	r2, [r3, #8]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e041      	b.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d004      	beq.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d10c      	bne.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400

08002ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	2600      	movs	r6, #0
 8002cc8:	4d0c      	ldr	r5, [pc, #48]	; (8002cfc <__libc_init_array+0x38>)
 8002cca:	4c0d      	ldr	r4, [pc, #52]	; (8002d00 <__libc_init_array+0x3c>)
 8002ccc:	1b64      	subs	r4, r4, r5
 8002cce:	10a4      	asrs	r4, r4, #2
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	f000 f822 	bl	8002d1c <_init>
 8002cd8:	2600      	movs	r6, #0
 8002cda:	4d0a      	ldr	r5, [pc, #40]	; (8002d04 <__libc_init_array+0x40>)
 8002cdc:	4c0a      	ldr	r4, [pc, #40]	; (8002d08 <__libc_init_array+0x44>)
 8002cde:	1b64      	subs	r4, r4, r5
 8002ce0:	10a4      	asrs	r4, r4, #2
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	08002d58 	.word	0x08002d58
 8002d00:	08002d58 	.word	0x08002d58
 8002d04:	08002d58 	.word	0x08002d58
 8002d08:	08002d5c 	.word	0x08002d5c

08002d0c <memset>:
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4402      	add	r2, r0
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d100      	bne.n	8002d16 <memset+0xa>
 8002d14:	4770      	bx	lr
 8002d16:	f803 1b01 	strb.w	r1, [r3], #1
 8002d1a:	e7f9      	b.n	8002d10 <memset+0x4>

08002d1c <_init>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr

08002d28 <_fini>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr
